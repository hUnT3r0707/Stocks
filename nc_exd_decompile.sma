 
/* ERROR PREPROCESSING! Index 173148 out of bounds for length 105300 */
 function "audioCode" (number 124)

/* ERROR PREPROCESSING! Index 173192 out of bounds for length 105300 */
 function "pitch" (number 125)

/* ERROR PREPROCESSING! Index 173236 out of bounds for length 105300 */
 function "notifyAllPlugins" (number 126)

/* ERROR PREPROCESSING! Index 173384 out of bounds for length 105300 */
 function "delay" (number 127)
new __dhud_color;
new __dhud_x;
new __dhud_y;
new __dhud_effect;
new __dhud_fxtime;
new __dhud_holdtime;
new __dhud_fadeintime;
new __dhud_fadeouttime;
new __dhud_reliable;
new TeamName[4][0] =
{
	{
		0, ...
	},
	{
		84, ...
	},
	{
		67, ...
	},
	{
		83, ...
	}
};
new xs__ITaskId = 16;
new xs__ITaskParam[1033] =
{
	16, 16, 52, 60, 0, 84, 69, 82, 82, 79, 82, 73, 83, 84, 0, 67, 84, 0, 83, 80, 69, 67, 84, 65, 84, 79, 82, 0, 0, 0, 0, 83, 97, 121, 84, 101, 120, 116, 0, 0, 0, 84, 101, 97, 109, 73, 110, 102, 111, 0, 16, 184, 344, 512, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 118, 95, 110, 99, 102, 105, 114, 101, 103, 114, 101, 110, 97, 100, 101, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 118, 95, 110, 99, 102, 114, 111, 115, 116, 110, 97, 100, 101, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 119, 95, 110, 99, 102, 105, 114, 101, 103, 114, 101, 110, 97, 100, 101, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 119, 95, 110, 99, 102, 114, 111, 115, 116, 110, 97, 100, 101, 46, 109, 100, 108, 0, 12, 184, 348, 109, 111, 100, 101, 108, 115, 47, 112, 108, 97, 121, 101, 114, 47, 110, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 47, 110, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 118, 95, 110, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 118, 95, 116, 114, 105, 112, 109, 105, 110, 101, 49, 46, 109, 100, 108, 0, 16, 124, 248, 388, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 110, 99, 95, 98, 101, 101, 112, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 110, 99, 95, 116, 101, 108, 101, 112, 111, 114, 116, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 103, 114, 101, 110, 97, 100, 101, 95, 101, 120, 112, 108, 111, 100, 101, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 115, 111, 110, 97, 114, 95, 115, 111, 117, 110, 100, 46, 119, 97, 118, 0, 12, 104, 196, 119, 97, 114, 99, 114, 97, 102, 116, 51, 47, 102, 114, 111, 115, 116, 110, 111, 118, 97, 46, 119, 97, 118, 0, 119, 97, 114, 99, 114, 97, 102, 116, 51, 47, 105, 109, 112, 97, 108, 101, 104, 105, 116, 46, 119, 97, 118, 0, 119, 97, 114, 99, 114, 97, 102, 116, 51, 47, 105, 109, 112, 97, 108, 101, 108, 97, 117, 110, 99, 104, 49, 46, 119, 97, 118, 0, 16, 148, 280, 412, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 107, 110, 105, 102, 101, 95, 115, 116, 114, 105, 107, 101, 49, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 107, 110, 105, 102, 101, 95, 115, 116, 114, 105, 107, 101, 50, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 107, 110, 105, 102, 101, 95, 115, 116, 114, 105, 107, 101, 51, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 107, 110, 105, 102, 101, 95, 115, 116, 114, 105, 107, 101, 52, 46, 119, 97, 118, 0, 20, 112, 204, 304, 388, 119, 101, 97, 112, 111, 110, 115, 47, 109, 105, 110, 101, 95, 100, 101, 112, 108, 111, 121, 46, 119, 97, 118, 0, 119, 101, 97, 112, 111, 110, 115, 47, 109, 105, 110, 101, 95, 99, 104, 97, 114, 103, 101, 46, 119, 97, 118, 0, 119, 101, 97, 112, 111, 110, 115, 47, 109, 105, 110, 101, 95, 97, 99, 116, 105, 118, 97, 116, 101, 46, 119, 97, 118, 0, 100, 101, 98, 114, 105, 115, 47, 98, 101, 97, 109, 115, 116, 97, 114, 116, 57, 46, 119, 97, 118, 0, 105, 116, 101, 109, 115, 47, 103, 117, 110, 112, 105, 99, 107, 117, 112, 50, 46, 119, 97, 118, 0, 8, 80, 115, 112, 114, 105, 116, 101, 115, 47, 122, 98, 101, 97, 109, 52, 46, 115, 112, 114, 0, 115, 112, 114, 105, 116, 101, 115, 47, 122, 101, 114, 111, 103, 120, 112, 108, 111, 100, 101, 46, 115, 112, 114, 0, 8, 76, 115, 112, 114, 105, 116, 101, 115, 47, 102, 108, 97, 109, 101, 46, 115, 112, 114, 0, 115, 112, 114, 105, 116, 101, 115, 47, 98, 108, 97, 99, 107, 95, 115, 109, 111, 107, 101, 51, 46, 115, 112, 114, 0, 12, 96, 180, 115, 112, 114, 105, 116, 101, 115, 47, 108, 97, 115, 101, 114, 98, 101, 97, 109, 46, 115, 112, 114, 0, 115, 112, 114, 105, 116, 101, 115, 47, 115, 104, 111, 99, 107, 119, 97, 118, 101, 46, 115, 112, 114, 0, 109, 111, 100, 101, 108, 115, 47, 103, 108, 97, 115, 115, 103, 105, 98, 115, 46, 109, 100, 108, 0, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 0, 1058642330, 1045220557, 1082130432, 0, -1082130432, 1060320051, 1082130432, 0, 1036831949, 1045220557, 1082130432, 0, 1036831949, 1050253722, 1082130432, 0, -1082130432, 1063675494, 1082130432, 0, 1061997773, 1036831949, 1082130432, 0, -1082130432, 1058642330, 1082130432, 0, 1061997773, 1050253722, 1082130432, 0, -1082130432, 1053609165, 1082130432, 0, 1036831949, 1056964608, 1082130432
};
new xs__TaskFlags[5] =
{
	16, 16, 52, 60, 0
};
new xs__TaskFunc[48] =
{
	16, 16, 52, 60, 0, 84, 69, 82, 82, 79, 82, 73, 83, 84, 0, 67, 84, 0, 83, 80, 69, 67, 84, 65, 84, 79, 82, 0, 0, 0, 0, 83, 97, 121, 84, 101, 120, 116, 0, 0, 0, 84, 101, 97, 109, 73, 110, 102
};
new xs__TaskId = 16;
new Float:xs__TaskInterval = 16;
new xs__TaskParam[1033] =
{
	16, 16, 52, 60, 0, 84, 69, 82, 82, 79, 82, 73, 83, 84, 0, 67, 84, 0, 83, 80, 69, 67, 84, 65, 84, 79, 82, 0, 0, 0, 0, 83, 97, 121, 84, 101, 120, 116, 0, 0, 0, 84, 101, 97, 109, 73, 110, 102, 111, 0, 16, 184, 344, 512, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 118, 95, 110, 99, 102, 105, 114, 101, 103, 114, 101, 110, 97, 100, 101, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 118, 95, 110, 99, 102, 114, 111, 115, 116, 110, 97, 100, 101, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 119, 95, 110, 99, 102, 105, 114, 101, 103, 114, 101, 110, 97, 100, 101, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 119, 95, 110, 99, 102, 114, 111, 115, 116, 110, 97, 100, 101, 46, 109, 100, 108, 0, 12, 184, 348, 109, 111, 100, 101, 108, 115, 47, 112, 108, 97, 121, 101, 114, 47, 110, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 47, 110, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 118, 95, 110, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 118, 95, 116, 114, 105, 112, 109, 105, 110, 101, 49, 46, 109, 100, 108, 0, 16, 124, 248, 388, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 110, 99, 95, 98, 101, 101, 112, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 110, 99, 95, 116, 101, 108, 101, 112, 111, 114, 116, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 103, 114, 101, 110, 97, 100, 101, 95, 101, 120, 112, 108, 111, 100, 101, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 115, 111, 110, 97, 114, 95, 115, 111, 117, 110, 100, 46, 119, 97, 118, 0, 12, 104, 196, 119, 97, 114, 99, 114, 97, 102, 116, 51, 47, 102, 114, 111, 115, 116, 110, 111, 118, 97, 46, 119, 97, 118, 0, 119, 97, 114, 99, 114, 97, 102, 116, 51, 47, 105, 109, 112, 97, 108, 101, 104, 105, 116, 46, 119, 97, 118, 0, 119, 97, 114, 99, 114, 97, 102, 116, 51, 47, 105, 109, 112, 97, 108, 101, 108, 97, 117, 110, 99, 104, 49, 46, 119, 97, 118, 0, 16, 148, 280, 412, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 107, 110, 105, 102, 101, 95, 115, 116, 114, 105, 107, 101, 49, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 107, 110, 105, 102, 101, 95, 115, 116, 114, 105, 107, 101, 50, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 107, 110, 105, 102, 101, 95, 115, 116, 114, 105, 107, 101, 51, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 107, 110, 105, 102, 101, 95, 115, 116, 114, 105, 107, 101, 52, 46, 119, 97, 118, 0, 20, 112, 204, 304, 388, 119, 101, 97, 112, 111, 110, 115, 47, 109, 105, 110, 101, 95, 100, 101, 112, 108, 111, 121, 46, 119, 97, 118, 0, 119, 101, 97, 112, 111, 110, 115, 47, 109, 105, 110, 101, 95, 99, 104, 97, 114, 103, 101, 46, 119, 97, 118, 0, 119, 101, 97, 112, 111, 110, 115, 47, 109, 105, 110, 101, 95, 97, 99, 116, 105, 118, 97, 116, 101, 46, 119, 97, 118, 0, 100, 101, 98, 114, 105, 115, 47, 98, 101, 97, 109, 115, 116, 97, 114, 116, 57, 46, 119, 97, 118, 0, 105, 116, 101, 109, 115, 47, 103, 117, 110, 112, 105, 99, 107, 117, 112, 50, 46, 119, 97, 118, 0, 8, 80, 115, 112, 114, 105, 116, 101, 115, 47, 122, 98, 101, 97, 109, 52, 46, 115, 112, 114, 0, 115, 112, 114, 105, 116, 101, 115, 47, 122, 101, 114, 111, 103, 120, 112, 108, 111, 100, 101, 46, 115, 112, 114, 0, 8, 76, 115, 112, 114, 105, 116, 101, 115, 47, 102, 108, 97, 109, 101, 46, 115, 112, 114, 0, 115, 112, 114, 105, 116, 101, 115, 47, 98, 108, 97, 99, 107, 95, 115, 109, 111, 107, 101, 51, 46, 115, 112, 114, 0, 12, 96, 180, 115, 112, 114, 105, 116, 101, 115, 47, 108, 97, 115, 101, 114, 98, 101, 97, 109, 46, 115, 112, 114, 0, 115, 112, 114, 105, 116, 101, 115, 47, 115, 104, 111, 99, 107, 119, 97, 118, 101, 46, 115, 112, 114, 0, 109, 111, 100, 101, 108, 115, 47, 103, 108, 97, 115, 115, 103, 105, 98, 115, 46, 109, 100, 108, 0, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 0, 1058642330, 1045220557, 1082130432, 0, -1082130432, 1060320051, 1082130432, 0, 1036831949, 1045220557, 1082130432, 0, 1036831949, 1050253722, 1082130432, 0, -1082130432, 1063675494, 1082130432, 0, 1061997773, 1036831949, 1082130432, 0, -1082130432, 1058642330, 1082130432, 0, 1061997773, 1050253722, 1082130432, 0, -1082130432, 1053609165, 1082130432, 0, 1036831949, 1056964608, 1082130432
};
new xs__TaskRepeat = 16;
new xs__global_null = 16;
new xs__internalseed = 16;
new xs__logtypenames[6][0] =
{
	{
		0, ...
	},
	{
		84, ...
	},
	{
		67, ...
	},
	{
		83, ...
	},
	{
		0, ...
	},
	{
		82, ...
	}
};
new xs__maxnum = 16;
new xs__replace_buf[3072] =
{
	16, 16, 52, 60, 0, 84, 69, 82, 82, 79, 82, 73, 83, 84, 0, 67, 84, 0, 83, 80, 69, 67, 84, 65, 84, 79, 82, 0, 0, 0, 0, 83, 97, 121, 84, 101, 120, 116, 0, 0, 0, 84, 101, 97, 109, 73, 110, 102, 111, 0, 16, 184, 344, 512, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 118, 95, 110, 99, 102, 105, 114, 101, 103, 114, 101, 110, 97, 100, 101, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 118, 95, 110, 99, 102, 114, 111, 115, 116, 110, 97, 100, 101, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 119, 95, 110, 99, 102, 105, 114, 101, 103, 114, 101, 110, 97, 100, 101, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 119, 95, 110, 99, 102, 114, 111, 115, 116, 110, 97, 100, 101, 46, 109, 100, 108, 0, 12, 184, 348, 109, 111, 100, 101, 108, 115, 47, 112, 108, 97, 121, 101, 114, 47, 110, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 47, 110, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 118, 95, 110, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 46, 109, 100, 108, 0, 109, 111, 100, 101, 108, 115, 47, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 118, 95, 116, 114, 105, 112, 109, 105, 110, 101, 49, 46, 109, 100, 108, 0, 16, 124, 248, 388, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 110, 99, 95, 98, 101, 101, 112, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 110, 99, 95, 116, 101, 108, 101, 112, 111, 114, 116, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 103, 114, 101, 110, 97, 100, 101, 95, 101, 120, 112, 108, 111, 100, 101, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 115, 111, 110, 97, 114, 95, 115, 111, 117, 110, 100, 46, 119, 97, 118, 0, 12, 104, 196, 119, 97, 114, 99, 114, 97, 102, 116, 51, 47, 102, 114, 111, 115, 116, 110, 111, 118, 97, 46, 119, 97, 118, 0, 119, 97, 114, 99, 114, 97, 102, 116, 51, 47, 105, 109, 112, 97, 108, 101, 104, 105, 116, 46, 119, 97, 118, 0, 119, 97, 114, 99, 114, 97, 102, 116, 51, 47, 105, 109, 112, 97, 108, 101, 108, 97, 117, 110, 99, 104, 49, 46, 119, 97, 118, 0, 16, 148, 280, 412, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 107, 110, 105, 102, 101, 95, 115, 116, 114, 105, 107, 101, 49, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 107, 110, 105, 102, 101, 95, 115, 116, 114, 105, 107, 101, 50, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 107, 110, 105, 102, 101, 95, 115, 116, 114, 105, 107, 101, 51, 46, 119, 97, 118, 0, 78, 105, 103, 104, 116, 99, 114, 97, 119, 108, 101, 114, 69, 120, 68, 47, 107, 110, 105, 102, 101, 95, 115, 116, 114, 105, 107, 101, 52, 46, 119, 97, 118, 0, 20, 112, 204, 304, 388, 119, 101, 97, 112, 111, 110, 115, 47, 109, 105, 110, 101, 95, 100, 101, 112, 108, 111, 121, 46, 119, 97, 118, 0, 119, 101, 97, 112, 111, 110, 115, 47, 109, 105, 110, 101, 95, 99, 104, 97, 114, 103, 101, 46, 119, 97, 118, 0, 119, 101, 97, 112, 111, 110, 115, 47, 109, 105, 110, 101, 95, 97, 99, 116, 105, 118, 97, 116, 101, 46, 119, 97, 118, 0, 100, 101, 98, 114, 105, 115, 47, 98, 101, 97, 109, 115, 116, 97, 114, 116, 57, 46, 119, 97, 118, 0, 105, 116, 101, 109, 115, 47, 103, 117, 110, 112, 105, 99, 107, 117, 112, 50, 46, 119, 97, 118, 0, 8, 80, 115, 112, 114, 105, 116, 101, 115, 47, 122, 98, 101, 97, 109, 52, 46, 115, 112, 114, 0, 115, 112, 114, 105, 116, 101, 115, 47, 122, 101, 114, 111, 103, 120, 112, 108, 111, 100, 101, 46, 115, 112, 114, 0, 8, 76, 115, 112, 114, 105, 116, 101, 115, 47, 102, 108, 97, 109, 101, 46, 115, 112, 114, 0, 115, 112, 114, 105, 116, 101, 115, 47, 98, 108, 97, 99, 107, 95, 115, 109, 111, 107, 101, 51, 46, 115, 112, 114, 0, 12, 96, 180, 115, 112, 114, 105, 116, 101, 115, 47, 108, 97, 115, 101, 114, 98, 101, 97, 109, 46, 115, 112, 114, 0, 115, 112, 114, 105, 116, 101, 115, 47, 115, 104, 111, 99, 107, 119, 97, 118, 101, 46, 115, 112, 114, 0, 109, 111, 100, 101, 108, 115, 47, 103, 108, 97, 115, 115, 103, 105, 98, 115, 46, 109, 100, 108, 0, 48, 60, 72, 84, 96, 108, 120, 132, 144, 156, 168, 180, 0, 1058642330, 1045220557, 1082130432, 0, -1082130432, 1060320051, 1082130432, 0, 1036831949, 1045220557, 1082130432, 0, 1036831949, 1050253722, 1082130432, 0, -1082130432, 1063675494, 1082130432, 0, 1061997773, 1036831949, 1082130432, 0, -1082130432, 1058642330, 1082130432, 0, 1061997773, 1050253722, 1082130432, 0, -1082130432, 1053609165, 1082130432, 0, 1036831949, 1056964608, 1082130432, 0, -1082130432, 1036831949, 1082130432, 0, -1082130432, 1050253722, 1082130432, 280, 288, 296, 304, 312, 320, 328, 336, 344, 352, 360, 368, 376, 384, 392, 400, 408, 416, 424, 432, 440, 448, 456, 464, 472, 480, 488, 496, 504, 512, 520, 528, 536, 544, 552, 560, 568, 576, 584, 592, 600, 608, 616, 624, 632, 640, 648, 656, 664, 672, 680, 688, 696, 704, 712, 720, 728, 736, 744, 752, 760, 768, 776, 784, 792, 800, 808, 816, 824, 832, 0, 0, 1065353216, 0, 0, -1082130432, 0, 1065353216, 0, 0, -1082130432, 0, 1065353216, 0, 0, -1082130432, 0, 0, -1082130432, 1065353216, 1065353216, 1065353216, 1065353216, 1065353216, 1065353216, -1082130432, 1065353216, 1065353216, 1065353216, -1082130432, -1082130432, -1082130432, 1065353216, 1065353216, -1082130432, -1082130432, -1082130432, 1065353216, -1082130432, -1082130432, -1082130432, -1082130432, 0, 0, 1073741824, 0, 0, -1073741824, 0, 1073741824, 0, 0, -1073741824, 0, 1073741824, 0, 0, -1073741824, 0, 0, -1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, 1073741824, -1073741824, 1073741824, 1073741824, 1073741824, -1073741824, -1073741824, -1073741824, 1073741824, 1073741824, -1073741824, -1073741824, -1073741824, 1073741824, -1073741824, -1073741824, -1073741824, -1073741824, 0, 0, 1077936128, 0, 0, -1069547520, 0, 1077936128, 0, 0, -1069547520, 0, 1077936128, 0, 0, -1069547520, 0, 0, -1069547520, 1077936128, 1077936128, 1077936128, 1077936128, 1077936128, 1077936128, -1069547520, 1077936128, 1077936128, 1077936128, -1069547520, -1069547520, -1069547520, 1077936128, 1077936128, -1069547520, -1069547520, -1069547520, 1077936128, -1069547520, -1069547520, -1069547520, -1069547520, 0, 0, 1082130432, 0, 0, -1065353216, 0, 1082130432, 0, 0, -1065353216, 0, 1082130432, 0, 0, -1065353216, 0, 0, -1065353216, 1082130432, 1082130432, 1082130432, 1082130432, 1082130432, 1082130432, -1065353216, 1082130432, 1082130432, 1082130432, -1065353216, -1065353216, -1065353216, 1082130432, 1082130432, -1065353216, -1065353216, -1065353216, 1082130432, -1065353216, -1065353216, -1065353216, -1065353216, 0, 0, 1084227584, 0, 0, -1063256064, 0, 1084227584, 0, 0, -1063256064, 0, 1084227584, 0, 0, -1063256064, 0, 0, -1063256064, 1084227584, 1084227584, 1084227584, 1084227584, 1084227584, 1084227584, -1063256064, 1084227584, 1084227584, 1084227584, -1063256064, -1063256064, -1063256064, 1084227584, 1084227584, -1063256064, -1063256064, -1063256064, 1084227584, -1063256064, -1063256064, -1063256064, -1063256064, 108, 97, 115, 101, 114, 109, 105, 110, 101, 0, 102, 117, 110, 99, 95, 98, 114, 101, 97, 107, 97, 98, 108, 101, 0, 0, 52, 0, 90, 1, 32, 0, 100, 90, 1, 120, 100, 100, 90, 90, 90, 100, 120, 30, 120, 200, 32, 90, 120, 90, 2, 35, 90, 90, 0, 100, 124, 124, 168, 168, 216, 280, 332, 368, 416, 456, 532, 580, 644, 692, 740, 788, 836, 876, 932, 972, 1028, 1072, 1108, 1152, 1192, 1240, 1304, 1356, 1404, 1448, 1496, 0, 119, 101, 97, 112, 111, 110, 95, 112, 50, 50, 56, 0, 0, 119, 101, 97, 112, 111, 110, 95, 115, 99, 111, 117, 116, 0, 119, 101, 97, 112, 111, 110, 95, 104, 101, 103, 114, 101, 110, 97, 100, 101, 0, 119, 101, 97, 112, 111, 110, 95, 120, 109, 49, 48, 49, 52, 0, 119, 101, 97, 112, 111, 110, 95, 99, 52, 0, 119, 101, 97, 112, 111, 110, 95, 109, 97, 99, 49, 48, 0, 119, 101, 97, 112, 111, 110, 95, 97, 117, 103, 0, 119, 101, 97, 112, 111, 110, 95, 115, 109, 111, 107, 101, 103, 114, 101, 110, 97, 100, 101, 0, 119, 101, 97, 112, 111, 110, 95, 101, 108, 105, 116, 101, 0, 119, 101, 97, 112, 111, 110, 95, 102, 105, 118, 101, 115, 101, 118, 101, 110, 0, 119, 101, 97, 112, 111, 110, 95, 117, 109, 112, 52, 53, 0, 119, 101, 97, 112, 111, 110, 95, 115, 103, 53, 53, 48, 0, 119, 101, 97, 112, 111, 110, 95, 103, 97, 108, 105, 108, 0, 119, 101, 97, 112, 111, 110, 95, 102, 97, 109, 97, 115, 0, 119, 101, 97, 112, 111, 110, 95, 117, 115, 112, 0, 119, 101, 97, 112, 111, 110, 95, 103, 108, 111, 99, 107, 49, 56, 0, 119, 101, 97, 112, 111, 110, 95, 97, 119, 112, 0, 119, 101, 97, 112, 111, 110, 95, 109, 112, 53, 110, 97, 118, 121, 0, 119, 101, 97, 112, 111, 110, 95, 109, 50, 52, 57, 0, 119, 101, 97, 112, 111, 110, 95, 109, 51, 0, 119, 101, 97, 112, 111, 110, 95, 109, 52, 97, 49, 0, 119, 101, 97, 112, 111, 110, 95, 116, 109, 112, 0, 119, 101, 97, 112, 111, 110, 95, 103, 51, 115, 103, 49, 0, 119, 101, 97, 112, 111, 110, 95, 102, 108, 97, 115, 104, 98, 97, 110, 103, 0, 119, 101, 97, 112, 111, 110, 95, 100, 101, 97, 103, 108, 101, 0, 119, 101, 97, 112, 111, 110, 95, 115, 103, 53, 53, 50, 0, 119, 101, 97, 112, 111, 110, 95, 97, 107, 52, 55, 0, 119, 101, 97, 112, 111, 110, 95, 107, 110, 105, 102, 101, 0, 119, 101, 97, 112, 111, 110, 95, 112, 57, 48, 0, 124, 124, 140, 140, 192, 192, 276, 276, 300, 312, 312, 356, 396, 420, 444, 464, 484, 496, 528, 540, 572, 616, 684, 700, 712, 732, 732, 756, 780, 800, 800, 0, 80, 50, 50, 56, 0, 0, 83, 99, 104, 109, 105, 100, 116, 32, 83, 99, 111, 117, 116, 0, 0, 88, 77, 49, 48, 49, 52, 32, 40, 65, 117, 116, 111, 45, 83, 104, 111, 116, 103, 117, 110, 41, 0, 0, 77, 97, 99, 45, 49, 48, 0, 65, 85, 71, 0, 0, 68, 117, 97, 108, 32, 69, 108, 105, 116, 101, 115, 0, 70, 105, 118, 101, 45, 83, 101, 118, 101, 110, 0, 85, 77, 80, 45, 52, 53, 0, 83, 71, 45, 53, 53, 48, 0, 71, 97, 108, 105, 108, 0, 70, 97, 109, 97, 115, 0, 85, 83, 80, 0, 71, 108, 111, 99, 107, 45, 49, 56, 0, 65, 87, 80, 0, 77, 80, 53, 45, 78, 97, 118, 121, 0, 77, 50, 52, 57, 32, 40, 80, 97, 114, 97, 41, 0, 77, 51, 32, 40, 80, 117, 109, 112, 45, 83, 104, 111, 116, 103, 117, 110, 41, 0, 77, 52, 65, 49, 0, 84, 77, 80, 0, 71, 51, 83, 71, 49, 0, 0, 68, 101, 97, 103, 108, 101, 0, 83, 71, 45, 53, 53, 50, 0, 65, 75, 45, 52, 55, 0, 0, 80, 57, 48, 0, 28, 132, 260, 404, 532, 656, 768, 76, 97, 115, 101, 114, 32, 83, 105, 103, 104, 116, 32, 92, 114, 91, 77, 111, 115, 116, 32, 70, 114, 97, 103, 115, 93, 0, 76, 97, 115, 101, 114, 32, 77, 105, 110, 101, 32, 92, 114, 91, 39, 70, 39, 32, 75, 101, 121, 32, 65, 99, 116, 105, 118, 97, 116, 101, 100, 93, 0, 83, 117, 105, 99, 105, 100, 101, 32, 66, 111, 109, 98, 101, 114, 32, 92, 114, 91, 39, 70, 39, 32, 75, 101, 121, 32, 65, 99, 116, 105, 118, 97, 116, 101, 100, 93, 0, 65, 100, 114, 101, 110, 97, 108, 105, 110, 101, 32, 92, 114, 91, 39, 70, 39, 32, 75, 101, 121, 32, 65, 99, 116, 105, 118, 97, 116, 101, 100, 93, 0, 77, 101, 100, 105, 99, 32, 75, 105, 116, 32, 92, 114, 91, 39, 70, 39, 32, 75, 101, 121, 32, 65, 99, 116, 105, 118, 97, 116, 101, 100, 93, 0, 70, 114, 111, 115, 116, 32, 78, 97, 100, 101, 32, 92, 114, 91, 50, 32, 70, 114, 111, 115, 116, 32, 78, 97, 100, 101, 115, 93, 0, 70, 105, 114, 101, 32, 71, 114, 101, 110, 97, 100, 101, 32, 92, 114, 91, 50, 32, 70, 105, 114, 101, 32, 78, 97, 100, 101, 115, 93, 0, 36, 100, 164, 220, 288, 364, 440, 496, 572, 102, 117, 110, 99, 95, 98, 111, 109, 98, 95, 116, 97, 114, 103, 101, 116, 0, 105, 110, 102, 111, 95, 98, 111, 109, 98, 95, 116, 97, 114, 103, 101, 116, 0, 104, 111, 115, 116, 97, 103, 101, 95, 101, 110, 116, 105, 116, 121, 0, 109, 111, 110, 115, 116, 101, 114, 95, 115, 99, 105, 101, 110, 116, 105, 115, 116, 0, 102, 117, 110, 99, 95, 104, 111, 115, 116, 97, 103, 101, 95, 114, 101, 115, 99, 117, 101, 0, 105, 110, 102, 111, 95, 104, 111, 115, 116, 97, 103, 101, 95, 114, 101, 115, 99, 117, 101, 0, 105, 110, 102, 111, 95, 118, 105, 112, 95, 115, 116, 97, 114, 116, 0, 102, 117, 110, 99, 95, 118, 105, 112, 95, 115, 97, 102, 101, 116, 121, 122, 111, 110, 101, 0, 102, 117, 110, 99, 95, 101, 115, 99, 97, 112, 101, 122, 111, 110, 101, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 140, 148, 156, 164, 172, 180, 188, 196, 204, 212, 220, 228, 236, 244, 252, 260, 268, 276, 284, 292, 300, 308, 316, 324, 332, 340, 348, 356, 364, 372, 380, 388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 132, 140, 148, 156, 164, 172, 180, 188, 196, 204, 212, 220, 228, 236, 244, 252, 260, 268, 276, 284, 292, 300, 308, 316, 324, 332, 340, 348, 356, 364, 372, 380, 388, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
};
new g_szNadeModelFiles[4][0] =
{
	{
		109, ...
	},
	{
		109, ...
	},
	{
		109, ...
	},
	{
		109, ...
	}
};
new g_szNcModelFiles[3][0] =
{
	{
		109, ...
	},
	{
		109, ...
	},
	{
		109, ...
	}
};
new g_szNcSoundFiles[4][0] =
{
	{
		78, ...
	},
	{
		78, ...
	},
	{
		78, ...
	},
	{
		78, ...
	}
};
new g_szFrostSounds[3][0] =
{
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	}
};
new g_szKnifeSoundFiles[4][0] =
{
	{
		78, ...
	},
	{
		78, ...
	},
	{
		78, ...
	},
	{
		78, ...
	}
};
new g_szLaserSounds[5][0] =
{
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		100, ...
	},
	{
		105, ...
	}
};
new g_szNcSpriteFiles[2][0] =
{
	{
		115, ...
	},
	{
		115, ...
	}
};
new g_szFireSprites[2][0] =
{
	{
		115, ...
	},
	{
		115, ...
	}
};
new g_szFrostSprites[3][0] =
{
	{
		115, ...
	},
	{
		115, ...
	},
	{
		109, ...
	}
};
new g_HudSync[12][4] =
{
	{
		0, 1058642330, 1045220557, 1082130432
	},
	{
		0, -1082130432, 1060320051, 1082130432
	},
	{
		0, 1036831949, 1045220557, 1082130432
	},
	{
		0, 1036831949, 1050253722, 1082130432
	},
	{
		0, -1082130432, 1063675494, 1082130432
	},
	{
		0, 1061997773, 1036831949, 1082130432
	},
	{
		0, -1082130432, 1058642330, 1082130432
	},
	{
		0, 1061997773, 1050253722, 1082130432
	},
	{
		0, -1082130432, 1053609165, 1082130432
	},
	{
		0, 1036831949, 1056964608, 1082130432
	},
	{
		0, -1082130432, 1036831949, 1082130432
	},
	{
		0, -1082130432, 1050253722, 1082130432
	}
};
new Float:size[70][3] =
{
	{
		0, 0, 1065353216
	},
	{
		0, 0, -1082130432
	},
	{
		0, 1065353216, 0
	},
	{
		0, -1082130432, 0
	},
	{
		1065353216, 0, 0
	},
	{
		-1082130432, 0, 0
	},
	{
		-1082130432, 1065353216, 1065353216
	},
	{
		1065353216, ...
	},
	{
		1065353216, -1082130432, 1065353216
	},
	{
		1065353216, 1065353216, -1082130432
	},
	{
		-1082130432, -1082130432, 1065353216
	},
	{
		1065353216, -1082130432, -1082130432
	},
	{
		-1082130432, 1065353216, -1082130432
	},
	{
		-1082130432, ...
	},
	{
		0, 0, 1073741824
	},
	{
		0, 0, -1073741824
	},
	{
		0, 1073741824, 0
	},
	{
		0, -1073741824, 0
	},
	{
		1073741824, 0, 0
	},
	{
		-1073741824, 0, 0
	},
	{
		-1073741824, 1073741824, 1073741824
	},
	{
		1073741824, ...
	},
	{
		1073741824, -1073741824, 1073741824
	},
	{
		1073741824, 1073741824, -1073741824
	},
	{
		-1073741824, -1073741824, 1073741824
	},
	{
		1073741824, -1073741824, -1073741824
	},
	{
		-1073741824, 1073741824, -1073741824
	},
	{
		-1073741824, ...
	},
	{
		0, 0, 1077936128
	},
	{
		0, 0, -1069547520
	},
	{
		0, 1077936128, 0
	},
	{
		0, -1069547520, 0
	},
	{
		1077936128, 0, 0
	},
	{
		-1069547520, 0, 0
	},
	{
		-1069547520, 1077936128, 1077936128
	},
	{
		1077936128, ...
	},
	{
		1077936128, -1069547520, 1077936128
	},
	{
		1077936128, 1077936128, -1069547520
	},
	{
		-1069547520, -1069547520, 1077936128
	},
	{
		1077936128, -1069547520, -1069547520
	},
	{
		-1069547520, 1077936128, -1069547520
	},
	{
		-1069547520, ...
	},
	{
		0, 0, 1082130432
	},
	{
		0, 0, -1065353216
	},
	{
		0, 1082130432, 0
	},
	{
		0, -1065353216, 0
	},
	{
		1082130432, 0, 0
	},
	{
		-1065353216, 0, 0
	},
	{
		-1065353216, 1082130432, 1082130432
	},
	{
		1082130432, ...
	},
	{
		1082130432, -1065353216, 1082130432
	},
	{
		1082130432, 1082130432, -1065353216
	},
	{
		-1065353216, -1065353216, 1082130432
	},
	{
		1082130432, -1065353216, -1065353216
	},
	{
		-1065353216, 1082130432, -1065353216
	},
	{
		-1065353216, ...
	},
	{
		0, 0, 1084227584
	},
	{
		0, 0, -1063256064
	},
	{
		0, 1084227584, 0
	},
	{
		0, -1063256064, 0
	},
	{
		1084227584, 0, 0
	},
	{
		-1063256064, 0, 0
	},
	{
		-1063256064, 1084227584, 1084227584
	},
	{
		1084227584, ...
	},
	{
		1084227584, -1063256064, 1084227584
	},
	{
		1084227584, 1084227584, -1063256064
	},
	{
		-1063256064, -1063256064, 1084227584
	},
	{
		1084227584, -1063256064, -1063256064
	},
	{
		-1063256064, 1084227584, -1063256064
	},
	{
		-1063256064, ...
	}
};
new String:ENT_CLASS_NAME[40] = "lasermine";
new String:ENT_CLASS_NAME3[60] = "func_breakable";
new g_iMaxBPAmmo[31] =
{
	0, 52, 0, 90, 1, 32, 0, 100, 90, 1, 120, 100, 100, 90, 90, 90, 100, 120, 30, 120, 200, 32, 90, 120, 90, 2, 35, 90, 90, 0, 100
};
new g_szWeaponClassnames[31][0] =
{
	{
		0, ...
	},
	{
		119, ...
	},
	{
		0, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	},
	{
		119, ...
	}
};
new g_szWeaponNames[31][0] =
{
	{
		0, ...
	},
	{
		80, ...
	},
	{
		0, ...
	},
	{
		83, ...
	},
	{
		0, ...
	},
	{
		88, ...
	},
	{
		0, ...
	},
	{
		77, ...
	},
	{
		65, ...
	},
	{
		0, ...
	},
	{
		68, ...
	},
	{
		70, ...
	},
	{
		85, ...
	},
	{
		83, ...
	},
	{
		71, ...
	},
	{
		70, ...
	},
	{
		85, ...
	},
	{
		71, ...
	},
	{
		65, ...
	},
	{
		77, ...
	},
	{
		77, ...
	},
	{
		77, ...
	},
	{
		77, ...
	},
	{
		84, ...
	},
	{
		71, ...
	},
	{
		0, ...
	},
	{
		68, ...
	},
	{
		83, ...
	},
	{
		65, ...
	},
	{
		0, ...
	},
	{
		80, ...
	}
};
new g_szItemNames[7][0] =
{
	{
		76, ...
	},
	{
		76, ...
	},
	{
		83, ...
	},
	{
		65, ...
	},
	{
		77, ...
	},
	{
		70, ...
	},
	{
		70, ...
	}
};
new g_szObjectives[9][0] =
{
	{
		102, ...
	},
	{
		105, ...
	},
	{
		104, ...
	},
	{
		109, ...
	},
	{
		102, ...
	},
	{
		105, ...
	},
	{
		105, ...
	},
	{
		102, ...
	},
	{
		102, ...
	}
};
new Ham:Ham_Player_ResetMaxSpeed = 70;
new bool:g_bRememberGuns[33];
new bool:g_bNCNextRound[33];
new bool:g_bHasLaser[33];
new bool:g_bIsPlanting[33];
new bool:g_bAdrenalineActive[33];
new bool:g_FirstSpawn[33];
new bool:g_bVisible[33];
new bool:g_HasGun[33];
new bool:g_AllowedLaserMine[33];
new bool:g_round_started;
new bool:g_IsDamageNAllowed;
new Float:g_late_spawn_time_limit;
new Float:g_flWallOrigin[33][3];
new Float:g_flLastTeleportTime[33];
new Float:g_FrozenGravity[33];
new Float:g_FrozenRenderingColor[33][3];
new Float:g_FrozenRenderingAmount[33];
new stuck[33];
new UnstuckCvar[2];
new g_PlayerPoints[33];
new g_NcExP[33][4];
new g_SurvivorExp[33][3];
new g_NcStats[33][4];
new g_SurvivorStats[33][3];
new g_bHasMine[33];
new g_HasSpawnedOr;
new g_show_adv;
new g_roundtime;
new g_BurningDuration[33];
new g_iFrostTime[33];
new g_iPrimaryWeapon[33];
new g_iSecondaryWeapon[33];
new g_iChosenItem[33];
new g_iAdrenalineUses[33];
new g_iMedKitUses[33];
new g_iSuicideTime[33];
new g_iTeleportsRemaining[33];
new g_iTeamCount[4];
new g_iMaxPlayers;
new g_iLsrSprite;
new g_iExpSprite;
new g_iTrailSpr;
new g_iExplSpr;
new g_iGlassSpr;
new g_iFlameSpr;
new g_iSmokeSpr;
new g_IsFrozen;
new g_FrozenRenderingFx[33];
new g_FrozenRenderingRender[33];
new plspeed[33];
new g_NCNextRound;
new g_pGameRules;
new g_EntMine;
new g_hWeaponMenu;
new g_hPrimaryWeaponMenu;
new g_hSecondaryWeaponMenu;
new g_hItemsMenu;
new g_msgShowMenu;
new g_msgVGUIMenu;
new g_msgDeath;
new g_msgScoreInfo;
new g_msgStatusIcon;
new g_hStatusValue;
new g_MsgDamage;
new g_MsgScreenFade;
new g_MsgClCorpse;
new g_pFrostDuration;
new g_pNightcrawlerRatio;
new g_pNightcrawlerVisibleTime;
new g_pNightcrawlerHealth;
new g_pNightcrawlerGravity;
new g_pNightcrawlerSpeed;
new g_pNightcrawlerTeleDelay;
new g_pNightcrawlerTeleCount;
new g_pMapLighting;
new g_pAdrenalineUses;
new g_pAdrenalineTime;
new g_pAdrenalineSpeed;
new g_pMedKitUses;
new g_pSuicideRadius;
new g_pSuicideDamage;
new g_pSuicideTime;
new gp_PrecacheSpawn;
new g_ModName[32];
new g_pFireDuration;
new g_pFireDamage;
new g_pFireDamagemax;
Float:operator/(Float:,_:)(Float:oper1, oper2)
{
	return floatdiv(oper1, float(oper2));
}

Float:operator+(Float:,_:)(Float:oper1, oper2)
{
	return floatadd(oper1, float(oper2));
}

bool:operator==(Float:,Float:)(Float:oper1, Float:oper2)
{
	return floatcmp(oper1, oper2) == 0;
}

bool:operator!=(Float:,Float:)(Float:oper1, Float:oper2)
{
	return floatcmp(oper1, oper2) != 0;
}

bool:operator>(Float:,Float:)(Float:oper1, Float:oper2)
{
	return 0 < floatcmp(oper1, oper2);
}

bool:operator>(Float:,_:)(Float:oper1, oper2)
{
	return 0 < floatcmp(oper1, float(oper2));
}

bool:operator<(Float:,Float:)(Float:oper1, Float:oper2)
{
	return 0 > floatcmp(oper1, oper2);
}

bool:operator<(Float:,_:)(Float:oper1, oper2)
{
	return 0 > floatcmp(oper1, float(oper2));
}

bool:operator<=(Float:,Float:)(Float:oper1, Float:oper2)
{
	return 0 >= floatcmp(oper1, oper2);
}

user_silentkill(index)
{
	static msgid;
	new msgblock;
	if (!msgid)
	{
		msgid = get_user_msgid("DeathMsg");
	}
	msgblock = get_msg_block(msgid);
	set_msg_block(msgid, 1);
	user_kill(index, 1);
	set_msg_block(msgid, msgblock);
	return 1;
}

get_user_button(id)
{
	return entity_get_int(id, 34);
}

set_rendering(index, fx, r, g, b, render, amount)
{
	entity_set_int(index, 33, fx);
	new Float:RenderColor[3] = 0.0;
	RenderColor[0] = float(r);
	RenderColor[1] = float(g);
	RenderColor[2] = float(b);
	entity_set_vector(index, 17, RenderColor);
	entity_set_int(index, 32, render);
	entity_set_float(index, 29, float(amount));
	return 1;
}

public __fatal_ham_error(Ham:id, HamError:err, reason[])
{
	new func = get_func_id("HamFilter", -1);
	new bool:fail = 1;
	new var1;
	if (func != -1 && callfunc_begin_i(func, -1) == 1)
	{
		callfunc_push_int(id);
		callfunc_push_int(err);
		callfunc_push_str(reason, 0);
		if (callfunc_end() == 1)
		{
			fail = false;
		}
	}
	if (fail)
	{
		set_fail_state(reason);
	}
	return 0;
}

OrpheuHook:OrpheuRegisterHookFromObject(object, libFunctionName[], libClassName[], hookFunctionName[], OrpheuHookPhase:phase)
{
	return OrpheuRegisterHook(OrpheuGetFunctionFromObject(object, libFunctionName, libClassName), hookFunctionName, phase);
}

player_dhudmessage(id, Float:x, Float:y, Float:time, color[3], msg[])
{
	static text[512];
	set_dhudmessage(color[0], color[1], color[2], x, y, 0, 0.0, time, 0.0, 0.0, false);
	vformat(text, 511, msg, 7);
	show_dhudmessage(id, text);
	return 0;
}

set_dhudmessage(red, green, blue, Float:x, Float:y, effects, Float:fxtime, Float:holdtime, Float:fadeintime, Float:fadeouttime, bool:reliable)
{
	__dhud_color = clamp(red, 0, 255) << 16 + clamp(green, 0, 255) << 8 + clamp(blue, 0, 255);
	__dhud_x = x;
	__dhud_y = y;
	__dhud_effect = effects;
	__dhud_fxtime = fxtime;
	__dhud_holdtime = holdtime;
	__dhud_fadeintime = fadeintime;
	__dhud_fadeouttime = fadeouttime;
	__dhud_reliable = reliable;
	return 1;
}

show_dhudmessage(index, message[])
{
	new buffer[128];
	new numArguments = numargs();
	if (numArguments == 2)
	{
		send_dhudMessage(index, message);
	}
	else
	{
		new var1;
		if (index || numArguments == 3)
		{
			vformat(buffer, 127, message, "");
			send_dhudMessage(index, buffer);
		}
		new playersList[32];
		new numPlayers;
		get_players(playersList, numPlayers, "ch", 2176);
		if (!numPlayers)
		{
			return 0;
		}
		new Array:handleArrayML = ArrayCreate(1, 32);
		new i = 2;
		new j;
		while (i < numArguments)
		{
			if (getarg(i, 0) == -1)
			{
				do {
					j++;
				} while ((buffer[j] = getarg(i + 1, j)));
				j = 0;
				if (GetLangTransKey(buffer) != -1)
				{
					i++;
					ArrayPushCell(handleArrayML, i);
				}
			}
			i++;
		}
		new size = ArraySize(handleArrayML);
		if (!size)
		{
			vformat(buffer, 127, message, "");
			send_dhudMessage(index, buffer);
		}
		else
		{
			new i;
			new j;
			while (i < numPlayers)
			{
				index = playersList[i];
				j = 0;
				while (j < size)
				{
					setarg(ArrayGetCell(handleArrayML, j), 0, index);
					j++;
				}
				vformat(buffer, 127, message, "");
				send_dhudMessage(index, buffer);
				i++;
			}
		}
		ArrayDestroy(handleArrayML);
	}
	return 1;
}

send_dhudMessage(index, message[])
{
	new var2;
	if (__dhud_reliable)
	{
		new var1;
		if (index)
		{
			var1 = 1;
		}
		else
		{
			var1 = 2;
		}
		var2 = var1;
	}
	else
	{
		if (index)
		{
			var2 = 8;
		}
		var2 = 0;
	}
	message_begin(var2, 51, 2180, index);
	write_byte(strlen(message) + 31);
	write_byte(6);
	write_byte(__dhud_effect);
	write_long(__dhud_color);
	write_long(__dhud_x);
	write_long(__dhud_y);
	write_long(__dhud_fadeintime);
	write_long(__dhud_fadeouttime);
	write_long(__dhud_holdtime);
	write_long(__dhud_fxtime);
	write_string(message);
	message_end();
	return 0;
}

Float:xs_rsqrt(Float:x)
{
	return floatdiv(1065353216, floatsqroot(x));
}

xs_vec_add(Float:in1[], Float:in2[], Float:out[])
{
	out[0] = floatadd(in1[0], in2[0]);
	out[1] = floatadd(in1[1], in2[1]);
	out[2] = floatadd(in1[2], in2[2]);
	return 0;
}

xs_vec_mul_scalar(Float:vec[], Float:scalar, Float:out[])
{
	out[0] = floatmul(vec[0], scalar);
	out[1] = floatmul(vec[1], scalar);
	out[2] = floatmul(vec[2], scalar);
	return 0;
}

xs_vec_normalize(Float:vec[], Float:out[])
{
	new Float:invlen = xs_rsqrt(floatadd(floatadd(floatmul(vec[0], vec[0]), floatmul(vec[1], vec[1])), floatmul(vec[2], vec[2])));
	out[0] = floatmul(vec[0], invlen);
	out[1] = floatmul(vec[1], invlen);
	out[2] = floatmul(vec[2], invlen);
	return 0;
}

xs_vec_copy(Float:vecIn[], Float:vecOut[])
{
	vecOut[0] = vecIn[0];
	vecOut[1] = vecIn[1];
	vecOut[2] = vecIn[2];
	return 0;
}

ColorChat(id, Color:type, msg[])
{
	new message[256];
	switch (type)
	{
		case 1:
		{
			message[0] = 1;
		}
		case 2:
		{
			message[0] = 4;
		}
		default:
		{
			message[0] = 3;
		}
	}
	vformat(message[1], 251, msg, "DeathMsg");
	message[192] = 0;
	new team;
	new ColorChange;
	new index;
	new MSG_Type;
	if (id)
	{
		MSG_Type = 1;
		index = id;
	}
	else
	{
		index = FindPlayer();
		MSG_Type = 2;
	}
	team = get_user_team(index, {0}, 0);
	ColorChange = ColorSelection(index, MSG_Type, type);
	ShowColorMessage(index, MSG_Type, message);
	if (ColorChange)
	{
		Team_Info(index, MSG_Type, TeamName[team]);
	}
	return 0;
}

ShowColorMessage(id, type, message[])
{
	static bool:saytext_used;
	static get_user_msgid_saytext;
	if (!saytext_used)
	{
		get_user_msgid_saytext = get_user_msgid("SayText");
		saytext_used = true;
	}
	message_begin(type, get_user_msgid_saytext, 2180, id);
	write_byte(id);
	write_string(message);
	message_end();
	return 0;
}

Team_Info(id, type, team[])
{
	static bool:teaminfo_used;
	static get_user_msgid_teaminfo;
	if (!teaminfo_used)
	{
		get_user_msgid_teaminfo = get_user_msgid("TeamInfo");
		teaminfo_used = true;
	}
	message_begin(type, get_user_msgid_teaminfo, 2180, id);
	write_byte(id);
	write_string(team);
	message_end();
	return 1;
}

ColorSelection(index, type, Color:Type)
{
	switch (Type)
	{
		case 4:
		{
			new var1 = TeamName;
			return Team_Info(index, type, var1[0][var1]);
		}
		case 5:
		{
			return Team_Info(index, type, TeamName[1]);
		}
		case 6:
		{
			return Team_Info(index, type, TeamName[2]);
		}
		default:
		{
			return 0;
		}
	}
}

FindPlayer()
{
	new i = -1;
	while (get_maxplayers() >= i)
	{
		i++;
		if (is_user_connected(i))
		{
			return i;
		}
	}
	return -1;
}

public plugin_precache()
{
	new i;
	while (i < 3)
	{
		precache_model(g_szNcModelFiles[i]);
		i++;
	}
	new i;
	while (i < 4)
	{
		precache_model(g_szNadeModelFiles[i]);
		i++;
	}
	new i;
	while (i < 4)
	{
		precache_sound(g_szNcSoundFiles[i]);
		i++;
	}
	new i;
	while (i < 3)
	{
		precache_sound(g_szFrostSounds[i]);
		i++;
	}
	new i;
	while (i < 4)
	{
		precache_sound(g_szKnifeSoundFiles[i]);
		i++;
	}
	new i;
	while (i < 5)
	{
		precache_sound(g_szLaserSounds[i]);
		i++;
	}
	new var1 = g_szFireSprites;
	g_iFlameSpr = precache_model(var1[0][var1]);
	g_iSmokeSpr = precache_model(g_szFireSprites[1]);
	new var2 = g_szNcSpriteFiles;
	g_iLsrSprite = precache_model(var2[0][var2]);
	g_iExpSprite = precache_model(g_szNcSpriteFiles[1]);
	new var3 = g_szFrostSprites;
	g_iTrailSpr = precache_model(var3[0][var3]);
	g_iExplSpr = precache_model(g_szFrostSprites[1]);
	g_iGlassSpr = precache_model(g_szFrostSprites[2]);
	gp_PrecacheSpawn = register_forward(91, "precache_spawn", 1);
	OrpheuRegisterHook(OrpheuGetFunction("InstallGameRules", 19360), "OnInstallGameRules", 1);
	return 0;
}

public plugin_init()
{
	register_plugin("NightCrawler ExD", "5.5", "-=_|R0CK|_=-");
	unregister_forward(91, gp_PrecacheSpawn, 0);
	formatex(g_ModName, 31, "NightCrawler ExD v5.5");
	g_pNightcrawlerRatio = register_cvar("nc_ratio", 19700, 0, 0);
	g_pNightcrawlerVisibleTime = register_cvar("nc_visible_time", 19772, 0, 0);
	g_pNightcrawlerHealth = register_cvar("nc_health", "250", 0, 0);
	g_pNightcrawlerGravity = register_cvar("nc_gravity", "400", 0, 0);
	g_pNightcrawlerSpeed = register_cvar("nc_speed", "255.0", 0, 0);
	g_pNightcrawlerTeleCount = register_cvar("nc_teleport_count", 20028, 0, 0);
	g_pNightcrawlerTeleDelay = register_cvar("nc_teleport_delay", 20108, 0, 0);
	g_pMapLighting = register_cvar("nc_lighting", 20164, 0, 0);
	UnstuckCvar[0] = register_cvar("nc_autounstuck", 20232, 0, 0);
	UnstuckCvar[1] = register_cvar("nc_autounstuckwait", 20316, 0, 0);
	g_pAdrenalineUses = register_cvar("nc_adrenaline_uses", 20400, 0, 0);
	g_pAdrenalineTime = register_cvar("nc_adrenaline_time", "20", 0, 0);
	g_pAdrenalineSpeed = register_cvar("nc_adrenaline_speed", "340", 0, 0);
	g_pSuicideDamage = register_cvar("nc_suicide_damage", "250", 0, 0);
	g_pSuicideRadius = register_cvar("nc_suicide_radius", "90", 0, 0);
	g_pSuicideTime = register_cvar("nc_suicide_time", 20828, 0, 0);
	g_pMedKitUses = register_cvar("nc_medkit_uses", 20896, 0, 0);
	g_pFrostDuration = register_cvar("nc_frost_duration", 20976, 0, 0);
	g_pFireDuration = register_cvar("nc_fire_duration", 21052, 0, 0);
	g_pFireDamage = register_cvar("nc_fire_damage", 21120, 0, 0);
	g_pFireDamagemax = register_cvar("nc_fire_damagemax", "20", 0, 0);
	RegisterHam(Ham_Player_ResetMaxSpeed, "player", "fw_ResetMaxSpeed_Post", 1);
	RegisterHam(0, "player", "Ham_PlayerSpawn_Post", 1);
	RegisterHam(11, "player", "Ham_PlayerKilled_Post", 1);
	RegisterHam(8, "player", "fw_TraceAttack", 0);
	RegisterHam(9, "player", "Ham_PlayerTakeDamage_Post", 1);
	RegisterHam(9, "player", "Ham_PlayerTakeDamage_Pre", 0);
	RegisterHam(9, "func_breakable", "Ham_LaserTakeDamage", 1);
	RegisterHam(41, "grenade", "fw_ThinkGrenade", 0);
	register_forward("", "fw_SetModel", 0);
	register_forward(__dhud_effect, "ltm_Think", 0);
	register_forward(105, "ltm_PostThink", 0);
	register_forward(87, "set_client_kv", 0);
	register_forward(94, "Forward_Touch_Pre", 0);
	register_forward(__dhud_fadeintime, "Forward_PlayerPreThink", 0);
	register_forward(124, "Forward_AddToFullPack_Post", 1);
	register_forward(109, "fw_GetGameDescription", 0);
	register_forward(28, "FwdEmitSound", 0);
	register_logevent("LogEvent_RoundEnd", 2, "1=Round_End");
	register_logevent("round_first", 2, "0=World triggered", "1&Restart_Round_");
	register_logevent("round_Commen", 2, "0=World triggered", "1=Game_Commencing");
	register_logevent("round_start", 2, "1=Round_Start");
	register_event("TextMsg", "round_restart", 23448, "2&#Game_C", "2&#Game_w");
	register_event("CurWeapon", "Event_CurWeapon", "be", "1=1");
	register_impulse(__dhud_holdtime, "CmdUseItem");
	register_menucmd(register_menuid("Team_Select", 1), 51, "TeamSelectMenu_Handler");
	g_msgShowMenu = get_user_msgid("ShowMenu");
	g_msgVGUIMenu = get_user_msgid("VGUIMenu");
	g_msgScoreInfo = get_user_msgid("ScoreInfo");
	g_msgDeath = get_user_msgid("DeathMsg");
	g_msgStatusIcon = get_user_msgid("StatusIcon");
	g_hStatusValue = get_user_msgid("StatusValue");
	g_MsgDamage = get_user_msgid("Damage");
	g_MsgScreenFade = get_user_msgid("ScreenFade");
	g_MsgClCorpse = get_user_msgid("ClCorpse");
	register_message(get_user_msgid("RoundTime"), "Round_Timer");
	register_message(g_msgShowMenu, "Message_ShowMenu");
	register_message(g_msgVGUIMenu, "Message_VGUIMenu");
	register_message(g_msgStatusIcon, "Message_StatusIcon");
	register_message(g_hStatusValue, "msg_StatusValue");
	register_message(g_MsgClCorpse, "msg_clcorpse");
	register_clcmd("jointeam", "CmdJoinTeam", -1, 24700, -1);
	register_clcmd("joinclass", "CmdJoinTeam", -1, 24700, -1);
	register_clcmd("say /guns", "CmdEnableGuns", -1, 24700, -1);
	register_clcmd("say guns", "CmdEnableGuns", -1, 24700, -1);
	register_clcmd("say /items", "show_itemmenu", -1, 24700, -1);
	register_clcmd("say items", "show_itemmenu", -1, 24700, -1);
	register_clcmd("say upgrade", "Upgrade_Menu", -1, 24700, -1);
	register_clcmd("say /upgrade", "Upgrade_Menu", -1, 24700, -1);
	new i;
	while (i < 12)
	{
		g_HudSync[i][0] = CreateHudSyncObj(0);
		i++;
	}
	g_iMaxPlayers = get_maxplayers();
	CreateMenus();
	set_task(1036831949, "checkstuck", 0, 25424, 0, 25428, 0);
	set_task(1103626240, "Task_StartGame", 4000, 25496, 0, 25500, 0);
	set_task(1128792064, "advert_plugin", 0, 25496, 0, 25560, 0);
	server_cmd("sv_skyname space");
	g_EntMine = engfunc(43, ENT_CLASS_NAME3);
	OrpheuRegisterHookFromObject(g_pGameRules, "FPlayerCanRespawn", "CGameRules", "OnFPlayerCanRespawn", OrpheuHookPhase:0);
	return 0;
}

public OnInstallGameRules()
{
	g_pGameRules = OrpheuGetReturn();
	return 0;
}

public precache_spawn(ent)
{
	if (is_valid_ent(ent))
	{
		static szClass[33];
		entity_get_string(ent, 0, szClass, 33);
		new i;
		while (i < 9)
		{
			if (equal(szClass, g_szObjectives[i], 0))
			{
				remove_entity(ent);
			}
			i++;
		}
	}
	return 0;
}

public fw_GetGameDescription()
{
	forward_return(1, g_ModName);
	return 4;
}

public advert_plugin()
{
	new i = 1;
	while (i <= g_iMaxPlayers)
	{
		if (is_user_connected(i))
		{
			ColorChat(i, Color:4, "%s This server is using\x04 %s v%s\x01 by\x03 %s", "\x04[\x03NC ExD\x04]\x01", "NightCrawler ExD", "5.5", "-=_|R0CK|_=-");
			ColorChat(i, Color:4, "%s To open\x04 Upgrade Menu,\x01 Write\x03 /upgrade", "\x04[\x03NC ExD\x04]\x01");
			switch (cs_get_user_team(i, 0))
			{
				case 1:
				{
					ColorChat(i, Color:4, "%s To use\x04 Teleport,\x01 Press\x03 F key [Flashlight] ", "\x04[\x03NC ExD\x04]\x01");
				}
				case 2:
				{
					ColorChat(i, Color:4, "%s To use\x04 iTems,\x01 Press\x03 F key [Flashlight] ", "\x04[\x03NC ExD\x04]\x01");
				}
				default:
				{
				}
			}
		}
		i++;
	}
	return 0;
}

public OrpheuHookReturn:OnFPlayerCanRespawn(gamerules, id)
{
	new var1;
	if (!is_user_connected(id) || 1 << id & 31 & g_HasSpawnedOr)
	{
		return OrpheuHookReturn:0;
	}
	if (g_late_spawn_time_limit < get_gametime())
	{
		OrpheuSetReturn(0);
		return OrpheuHookReturn:2;
	}
	return OrpheuHookReturn:0;
}

public client_putinserver(id)
{
	g_SurvivorStats[id][0] = 0;
	g_SurvivorStats[id][1] = 0;
	g_SurvivorStats[id][2] = 0;
	g_NcStats[id][0] = 0;
	g_NcStats[id][1] = 0;
	g_NcStats[id][2] = 0;
	g_NcStats[id][3] = 0;
	g_PlayerPoints[id] = 0;
	g_SurvivorExp[id][0] = 0;
	g_SurvivorExp[id][1] = 0;
	g_SurvivorExp[id][2] = 0;
	g_NcExP[id][0] = 0;
	g_NcExP[id][1] = 0;
	g_NcExP[id][2] = 0;
	g_NcExP[id][3] = 0;
	plspeed[id] = 0;
	g_bRememberGuns[id] = 0;
	g_bNCNextRound[id] = 0;
	g_bHasLaser[id] = 0;
	g_bIsPlanting[id] = 0;
	g_bHasMine[id] = 0;
	g_bAdrenalineActive[id] = 0;
	g_bVisible[id] = 1;
	g_FirstSpawn[id] = 0;
	g_iAdrenalineUses[id] = 0;
	g_iMedKitUses[id] = 0;
	g_iSuicideTime[id] = 0;
	g_iPrimaryWeapon[id] = 0;
	g_iSecondaryWeapon[id] = 0;
	g_iTeleportsRemaining[id] = 0;
	g_iChosenItem[id] = -1;
	g_bIsPlanting[id] = 0;
	remove_task(id + 9000, 0);
	remove_task(id + 10000, 0);
	new szLighting[3];
	get_pcvar_string(g_pMapLighting, szLighting, 2);
	engfunc(38, 0, szLighting);
	return 0;
}

public client_disconnect(id)
{
	g_SurvivorStats[id][0] = 0;
	g_SurvivorStats[id][1] = 0;
	g_SurvivorStats[id][2] = 0;
	g_NcStats[id][0] = 0;
	g_NcStats[id][1] = 0;
	g_NcStats[id][2] = 0;
	g_NcStats[id][3] = 0;
	g_PlayerPoints[id] = 0;
	plspeed[id] = 0;
	g_bIsPlanting[id] = 0;
	remove_task(id + 9000, 0);
	remove_task(id + 10000, 0);
	g_SurvivorExp[id][0] = 0;
	g_SurvivorExp[id][1] = 0;
	g_SurvivorExp[id][2] = 0;
	g_NcExP[id][0] = 0;
	g_NcExP[id][1] = 0;
	g_NcExP[id][2] = 0;
	g_NcExP[id][3] = 0;
	remove_task(id + 6000, 0);
	remove_task(id + 2000, 0);
	remove_task(id + 7000, 0);
	g_IsFrozen = ~1 << id & 31 & g_IsFrozen;
	g_HasSpawnedOr = ~1 << id & 31 & g_HasSpawnedOr;
	g_BurningDuration[id] = 0;
	RemoveAllTripmines(id);
	return 0;
}

public round_Commen()
{
	remove_task(4000, 0);
	set_task(1097859072, "Task_StartGame", 4000, 25496, 0, 25500, 0);
	server_cmd("mp_limitteams 0");
	server_cmd("mp_autoteambalance 0");
	server_cmd("mp_friendlyfire 0");
	server_cmd("mp_freezetime 0");
	return 0;
}

public Task_StartGame()
{
	server_cmd("sv_restart 1");
	return 0;
}

public round_first()
{
	server_cmd("mp_limitteams 0");
	server_cmd("mp_autoteambalance 0");
	server_cmd("mp_friendlyfire 0");
	server_cmd("mp_freezetime 0");
	LogEvent_RoundEnd();
	return 0;
}

public round_start()
{
	g_IsDamageNAllowed = false;
	set_task(1069547520, "Task_ShowUserDetails", 5000, 25496, 0, 27784, 0);
	g_NCNextRound = 0;
	g_round_started = true;
	g_late_spawn_time_limit = floatadd(1101004800, get_gametime());
	new szLighting[3];
	get_pcvar_string(g_pMapLighting, szLighting, 2);
	engfunc(38, 0, szLighting);
	return 0;
}

public LogEvent_RoundEnd()
{
	remove_task("weapon_xm1014", 0);
	remove_task(11000, 0);
	g_NCNextRound = 0;
	g_HasSpawnedOr = 0;
	remove_task(5000, 0);
	new i;
	while (i < 12)
	{
		ClearSyncHud(0, g_HudSync[i][0]);
		i++;
	}
	g_IsDamageNAllowed = true;
	set_task(1056964608, "Task_randomize", 11000, 25496, 0, 25500, 0);
	return 0;
}

public Task_randomize()
{
	new iRandom[32];
	new iRandomNum;
	new n = 1;
	while (n <= g_iMaxPlayers)
	{
		if (is_user_connected(n))
		{
			switch (cs_get_user_team(n, 0))
			{
				case 1:
				{
					g_FirstSpawn[n] = 1;
				}
				case 2:
				{
					g_FirstSpawn[n] = 1;
					if (g_bNCNextRound[n])
					{
						g_NCNextRound += 1;
					}
					else
					{
						iRandomNum++;
						iRandom[iRandomNum] = n;
					}
				}
				default:
				{
				}
			}
			g_AllowedLaserMine[n] = 0;
		}
		new var2;
		if (is_user_alive(n) && (cs_get_user_team(n, 0) == 1 || cs_get_user_team(n, 0) == 2))
		{
			g_PlayerPoints[n]++;
			ColorChat(n, Color:4, "%s You got\x04 +1 Exp\x01 for\x03 Surviving the round", "\x04[\x03NC ExD\x04]\x01");
		}
		n++;
	}
	CountTeams();
	new iNCAmount = ctcount_allowed() - g_NCNextRound;
	new var3;
	if (g_iTeamCount[2] >= 1 && iNCAmount >= 1 && iRandomNum >= 1)
	{
		new iRanPlayer;
		new count;
		do {
			iRanPlayer = iRandom[random(iRandomNum)];
			if (iRanPlayer)
			{
				count++;
				g_bNCNextRound[iRanPlayer] = 1;
			}
			iRanPlayer = 0;
		} while (count < iNCAmount);
	}
	new id = 1;
	while (id <= g_iMaxPlayers)
	{
		if (is_user_connected(id))
		{
			if (g_FirstSpawn[id])
			{
				if (g_bNCNextRound[id])
				{
					cs_set_user_team(id, 1, 0);
				}
				else
				{
					cs_set_user_team(id, 2, 0);
				}
				g_FirstSpawn[id] = 0;
				g_bNCNextRound[id] = 0;
			}
			g_bIsPlanting[id] = 0;
			remove_task(id + 9000, 0);
			remove_task(id + 10000, 0);
			remove_task(id + 6000, 0);
			remove_task(id + 1000, 0);
			remove_task(id + 2000, 0);
			RemoveAllTripmines(id);
		}
		id++;
	}
	return 0;
}

public Ham_PlayerSpawn_Post(id)
{
	if (!is_user_connected(id))
	{
		return 1;
	}
	g_HasSpawnedOr = 1 << id & 31 | g_HasSpawnedOr;
	g_SurvivorStats[id][0] = 0;
	g_SurvivorStats[id][1] = 0;
	g_SurvivorStats[id][2] = 0;
	g_NcStats[id][0] = 0;
	g_NcStats[id][1] = 0;
	g_NcStats[id][2] = 0;
	g_NcStats[id][3] = 0;
	g_bHasLaser[id] = 0;
	g_bIsPlanting[id] = 0;
	g_bHasMine[id] = 0;
	g_bAdrenalineActive[id] = 0;
	g_iAdrenalineUses[id] = 0;
	g_iMedKitUses[id] = 0;
	g_iSuicideTime[id] = 0;
	g_iTeleportsRemaining[id] = 0;
	g_iChosenItem[id] = -1;
	g_iFrostTime[id] = 0;
	g_BurningDuration[id] = 0;
	plspeed[id] = 0;
	g_HasGun[id] = 0;
	remove_task(id + 1000, 0);
	remove_task(id + 2000, 0);
	remove_task(id + 3000, 0);
	remove_task(id + 6000, 0);
	g_bIsPlanting[id] = 0;
	remove_task(id + 9000, 0);
	remove_task(id + 10000, 0);
	player_strip_weapons(id);
	g_FirstSpawn[id] = 0;
	g_bNCNextRound[id] = 0;
	new CsTeams:iTeam = cs_get_user_team(id, 0);
	switch (iTeam)
	{
		case 1:
		{
			set_user_info(id, "model", "nightcrawler");
			ColorChat(id, Color:4, "%s You are now\x04 Invisible.", "\x04[\x03NC ExD\x04]\x01");
			g_NcStats[id][0] = g_NcExP[id][0] * 5;
			g_NcStats[id][1] = g_NcExP[id][1] * 10;
			g_NcStats[id][2] = g_NcExP[id][2] * 5;
			g_NcStats[id][3] = g_NcExP[id][3] * 5;
			set_user_health(id, g_NcStats[id][0] + get_pcvar_num(g_pNightcrawlerHealth));
			set_user_gravity(id, get_pcvar_float(g_pNightcrawlerGravity) / 800);
			set_pev(id, 56, g_NcStats[id][2][get_pcvar_float(g_pNightcrawlerSpeed)]);
			cs_set_user_armor(id, g_NcStats[id][1], 2);
			set_user_footsteps(id, 1);
			g_iTeleportsRemaining[id] = get_pcvar_num(g_pNightcrawlerTeleCount);
			g_bVisible[id] = 0;
		}
		case 2:
		{
			if (g_bRememberGuns[id])
			{
				GiveWeapons(id);
				set_task(1073741824, "show_itemmenu", id, 25496, 0, 25500, 0);
			}
			else
			{
				new var1;
				if (g_iPrimaryWeapon[id] && g_iSecondaryWeapon[id])
				{
					menu_display(id, g_hPrimaryWeaponMenu, 0);
				}
				menu_display(id, g_hWeaponMenu, 0);
			}
			if (random_num(0, 2) == 1)
			{
				g_AllowedLaserMine[id] = 1;
			}
			g_SurvivorStats[id][0] = g_SurvivorExp[id][0] * 10;
			g_SurvivorStats[id][1] = g_SurvivorExp[id][1] * 10;
			g_SurvivorStats[id][2] = g_SurvivorExp[id][2] * 5;
			set_user_health(id, g_SurvivorStats[id][0] + 100);
			cs_set_user_armor(id, g_SurvivorStats[id][1], 2);
			set_user_footsteps(id, 0);
			g_bVisible[id] = 1;
		}
		default:
		{
		}
	}
	Event_CurWeapon(id);
	return 1;
}

public Task_ShowUserDetails()
{
	new i = 1;
	while (i <= g_iMaxPlayers)
	{
		if (is_user_alive(i))
		{
			switch (cs_get_user_team(i, 0))
			{
				case 1:
				{
					player_dhudmessage(i, -1.0, 0.9, 1.6, 28376, "HEALTH: %i/%d | TELEPORTS: %i", get_user_health(i), g_NcStats[i][0] + get_pcvar_num(g_pNightcrawlerHealth), g_iTeleportsRemaining[i]);
				}
				case 2:
				{
					switch (g_iChosenItem[i])
					{
						case 0:
						{
							player_dhudmessage(i, -1.0, 0.9, 1.6, 28508, "HEALTH: %i/%d | ABILITY: Laser Sight ", get_user_health(i), g_SurvivorStats[i][0] + 100);
						}
						case 1:
						{
							player_dhudmessage(i, -1.0, 0.9, 1.6, 28672, "HEALTH: %i/%d | ABILITY: Laser Mine | %i:REMAINING", get_user_health(i), g_SurvivorStats[i][0] + 100, g_bHasMine[i]);
						}
						case 2:
						{
							player_dhudmessage(i, -1.0, 0.9, 1.6, 28888, "HEALTH: %i/%d | ABILITY: Suicide Bomb ", get_user_health(i), g_SurvivorStats[i][0] + 100);
						}
						case 3:
						{
							player_dhudmessage(i, -1.0, 0.9, 1.6, 29056, "HEALTH: %i/%d | ABILITY: Adrenaline | %i:REMAINING", get_user_health(i), g_SurvivorStats[i][0] + 100, g_iAdrenalineUses[i]);
						}
						case 4:
						{
							player_dhudmessage(i, -1.0, 0.9, 1.6, 29272, "HEALTH: %i/%d | ABILITY: Medical Kit | %i:REMAINING", get_user_health(i), g_SurvivorStats[i][0] + 100, g_iMedKitUses[i]);
						}
						case 5:
						{
							player_dhudmessage(i, -1.0, 0.9, 1.6, 29492, "HEALTH: %i/%d | ABILITY: Frost Nade ", get_user_health(i), g_SurvivorStats[i][0] + 100);
						}
						case 6:
						{
							player_dhudmessage(i, -1.0, 0.9, 1.6, 29652, "HEALTH: %i/%d | ABILITY: He Grenade ", get_user_health(i), g_SurvivorStats[i][0] + 100);
						}
						default:
						{
							player_dhudmessage(i, -1.0, 0.9, 1.6, 29812, "HEALTH: %i/%d | ABILITY: None | Choose An Item (/items)", get_user_health(i), g_SurvivorStats[i][0] + 100);
						}
					}
				}
				default:
				{
				}
			}
		}
		i++;
	}
	CountTeams();
	new var1;
	if (g_iTeamCount[1] < 1 && g_iTeamCount[2] > 2)
	{
		server_cmd("sv_restart 1");
	}
	return 0;
}

public FwdEmitSound(id, channel, sample[])
{
	new var1;
	if (is_user_connected(id) && cs_get_user_team(id, 0) == 1)
	{
		if (equal(sample, "common/wpn_denyselect.wav", 0))
		{
			return 4;
		}
		if (equal(sample, "weapons/knife_", 14))
		{
			switch (sample[17])
			{
				case 49:
				{
					emit_sound(id, 1, g_szKnifeSoundFiles[2], random_float(1056964608, 1065353216), 1061997773, 0, __dhud_holdtime);
				}
				case 50:
				{
					emit_sound(id, 1, g_szKnifeSoundFiles[3], random_float(1056964608, 1065353216), 1061997773, 0, __dhud_holdtime);
				}
				case 98:
				{
					new var2 = g_szKnifeSoundFiles;
					emit_sound(id, 1, var2[0][var2], 1065353216, 1061997773, 0, __dhud_holdtime);
				}
				case 119:
				{
					emit_sound(id, 1, g_szKnifeSoundFiles[1], 1065353216, 1061997773, 0, 95);
				}
				default:
				{
				}
			}
			return 4;
		}
	}
	return 1;
}

public Forward_Touch_Pre(iEnt, id)
{
	new var1;
	if (!is_user_alive(id) || cs_get_user_team(id, 0) == 1)
	{
		return 1;
	}
	new szClassname[32];
	pev(iEnt, 1, szClassname, 31);
	new var2;
	if (equali(szClassname, "worldspawn", 0) || equali(szClassname, "func_wall", 0) || equali(szClassname, "func_breakable", 0))
	{
		pev(id, 118, g_flWallOrigin[id]);
	}
	else
	{
		new var3;
		if (equali(szClassname, "weaponbox", 0) || equali(szClassname, "armoury_entity", 0))
		{
			return 4;
		}
	}
	return 1;
}

public Forward_PlayerPreThink(id)
{
	new var1;
	if (!is_user_alive(id) || g_IsDamageNAllowed)
	{
		return 0;
	}
	if (1 << id & 31 & g_IsFrozen)
	{
		set_pev(id, 120, 30508);
		ApplyFrozenGravity(id);
		ApplyFrozenRendering(id);
	}
	switch (cs_get_user_team(id, 0))
	{
		case 1:
		{
			static iButton;
			iButton = get_user_button(id);
			if (iButton & 32)
			{
				static Float:fOrigin[3];
				pev(id, 118, fOrigin);
				if (get_distance_f(fOrigin, g_flWallOrigin[id]) > 1092616192)
				{
					return 0;
				}
				if (pev(id, __dhud_x) & 512)
				{
					return 0;
				}
				if (iButton & 8)
				{
					static Float:fVelocity[3];
					velocity_by_aim(id, g_NcStats[id][3][60], fVelocity);
					set_pev(id, 120, fVelocity);
				}
				if (iButton & 16)
				{
					static Float:fVelocity[3];
					velocity_by_aim(id, -g_NcStats[id][3][60], fVelocity);
					set_pev(id, 120, fVelocity);
				}
			}
		}
		case 2:
		{
			if (g_bHasLaser[id])
			{
				static iWeapon;
				static iBlue;
				static iGreen;
				static iRed;
				static iBody;
				static iTarget;
				get_user_aiming(id, iTarget, iBody, 9999);
				iWeapon = get_user_weapon(id, 0, 0);
				new var2;
				if (1 << iWeapon & 1508700584 || 1 << iWeapon & 67308546)
				{
					new var3;
					if (is_user_alive(iTarget) && cs_get_user_team(iTarget, 0) == 1)
					{
						iRed = 255;
						iGreen = 0;
						iBlue = 0;
					}
					else
					{
						iRed = 0;
						iGreen = 255;
						iBlue = 0;
					}
					static iOrigin[3];
					get_user_origin(id, iOrigin, "");
					message_begin(0, 23, 2180, 0);
					write_byte(1);
					write_short(id | 4096);
					write_coord(iOrigin[0]);
					write_coord(iOrigin[1]);
					write_coord(iOrigin[2]);
					write_short(g_iLsrSprite);
					write_byte(1);
					write_byte(10);
					write_byte(1);
					write_byte(5);
					write_byte(0);
					write_byte(iRed);
					write_byte(iGreen);
					write_byte(iBlue);
					write_byte(150);
					write_byte(25);
					message_end();
				}
			}
		}
		default:
		{
		}
	}
	return 0;
}

public Event_CurWeapon(id)
{
	new iWeapon = read_data(2);
	switch (cs_get_user_team(id, 0))
	{
		case 1:
		{
			if (iWeapon == 29)
			{
				set_pev(id, 144, g_szNcModelFiles[1]);
			}
			set_pev(id, 56, g_NcStats[id][2][get_pcvar_float(g_pNightcrawlerSpeed)]);
		}
		case 2:
		{
			new SpeedEvent[33];
			pev(id, 56, SpeedEvent[id]);
			new var1;
			if (1 << iWeapon & 1508700584 || 1 << iWeapon & 67308546)
			{
				if (g_iMaxBPAmmo[iWeapon] != cs_get_user_bpammo(id, iWeapon))
				{
					cs_set_user_bpammo(id, iWeapon, g_iMaxBPAmmo[iWeapon]);
				}
			}
			if (g_bAdrenalineActive[id])
			{
				set_pev(id, 56, g_SurvivorStats[id][2][get_pcvar_float(g_pAdrenalineSpeed)]);
			}
			else
			{
				set_pev(id, 56, SpeedEvent[id][g_SurvivorStats[id][2]]);
			}
			if (iWeapon == 4)
			{
				new var2 = g_szNadeModelFiles;
				set_pev(id, 144, var2[0][var2]);
			}
			else
			{
				if (iWeapon == 25)
				{
					set_pev(id, 144, g_szNadeModelFiles[1]);
				}
			}
		}
		default:
		{
		}
	}
	return 0;
}

public Upgrade_Menu(id)
{
	if (!is_user_alive(id))
	{
		return 1;
	}
	if (cs_get_user_team(id, 0) == 1)
	{
		static szText[64];
		static menu;
		formatex(szText, 63, "\r[Nc ExD]\y Upgrades:\n\r[Your Exp:\w %d\r]", g_PlayerPoints[id]);
		menu = menu_create(szText, "sub_playerT_menu", 0);
		formatex(szText, 63, "\wHealth:\r(%d/20) [Cost: \w2\r]", g_NcExP[id]);
		menu_additem(menu, szText, 31232, 0, -1);
		formatex(szText, 63, "\wArmour:\r(%d/10) [Cost: \w1\r]", g_NcExP[id][1]);
		menu_additem(menu, szText, 31372, 0, -1);
		formatex(szText, 63, "\wWalking Speed:\r(%d/20) [Cost: \w1\r]", g_NcExP[id][2]);
		menu_additem(menu, szText, 31540, 0, -1);
		formatex(szText, 63, "\wCrawl Speed:\r(%d/20) [Cost: \w2\r]", g_NcExP[id][3]);
		menu_additem(menu, szText, 31700, 0, -1);
		menu_display(id, menu, 0);
	}
	else
	{
		if (cs_get_user_team(id, 0) == 2)
		{
			static szText[64];
			static menu;
			formatex(szText, 63, "\r[Nc ExD]\y Upgrades:\n\r[Your Exp:\w %d\r]", g_PlayerPoints[id]);
			menu = menu_create(szText, "sub_playerCT_menu", 0);
			formatex(szText, 63, "\wHealth:\r(%d/10) [Cost: \w2\r]", g_SurvivorExp[id]);
			menu_additem(menu, szText, 32348, 0, -1);
			formatex(szText, 63, "\wArmour:\r(%d/10) [Cost: \w1\r]", g_SurvivorExp[id][1]);
			menu_additem(menu, szText, 32488, 0, -1);
			formatex(szText, 63, "\wSpeed:\r(%d/10) [Cost: \w1\r]", g_SurvivorExp[id][2]);
			menu_additem(menu, szText, 32624, 0, -1);
			menu_display(id, menu, 0);
		}
	}
	return 0;
}

public sub_playerT_menu(id, menu, item)
{
	new var1;
	if (!is_user_alive(id) || cs_get_user_team(id, 0) == 1 || g_PlayerPoints[id] <= 0)
	{
		return 1;
	}
	new Data[7];
	new Name[64];
	new Access;
	new Callback;
	menu_item_getinfo(menu, item, Access, Data, 5, Name, 63, Callback);
	new Key = str_to_num(Data);
	switch (Key)
	{
		case 1:
		{
			if (2 > g_PlayerPoints[id])
			{
				return 1;
			}
			if (20 > g_NcExP[id][0])
			{
				g_NcExP[id]++;
				g_PlayerPoints[id] -= 2;
				ColorChat(id, Color:4, "%s Your\x04 Health\x01 has been increased by\x03 5 units\x04 (%d/20)", "\x04[\x03NC ExD\x04]\x01", g_NcExP[id]);
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 will increase\x03 Next Round", "\x04[\x03NC ExD\x04]\x01");
			}
			else
			{
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 is at\x03 Maximum", "\x04[\x03NC ExD\x04]\x01");
			}
		}
		case 2:
		{
			if (10 > g_NcExP[id][1])
			{
				g_NcExP[id][1]++;
				g_PlayerPoints[id]--;
				ColorChat(id, Color:4, "%s Your\x04 Armour\x01 has been increased by\x03 10 units\x04 (%d/10)", "\x04[\x03NC ExD\x04]\x01", g_NcExP[id][1]);
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 will increase\x03 Next Round", "\x04[\x03NC ExD\x04]\x01");
			}
			else
			{
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 is at\x03 Maximum", "\x04[\x03NC ExD\x04]\x01");
			}
		}
		case 3:
		{
			if (20 > g_NcExP[id][2])
			{
				g_NcExP[id][2]++;
				g_PlayerPoints[id]--;
				ColorChat(id, Color:4, "%s Your\x04 Walking Speed\x01 has been increased by\x03 5 units\x04 (%d/20)", "\x04[\x03NC ExD\x04]\x01", g_NcExP[id][2]);
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 will increase\x03 Next Round", "\x04[\x03NC ExD\x04]\x01");
			}
			else
			{
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 is at\x03 Maximum", "\x04[\x03NC ExD\x04]\x01");
			}
		}
		case 4:
		{
			if (2 > g_PlayerPoints[id])
			{
				return 1;
			}
			if (20 > g_NcExP[id][3])
			{
				g_NcExP[id][3]++;
				g_PlayerPoints[id] -= 2;
				ColorChat(id, Color:4, "%s Your\x04 Crawling Speed\x01 has been increased by\x03 5 units\x04 (%d/20)", "\x04[\x03NC ExD\x04]\x01", g_NcExP[id][3]);
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 will increase\x03 Next Round", "\x04[\x03NC ExD\x04]\x01");
			}
			else
			{
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 is at\x03 Maximum", "\x04[\x03NC ExD\x04]\x01");
			}
		}
		default:
		{
			menu_destroy(menu);
			return 1;
		}
	}
	menu_destroy(menu);
	Upgrade_Menu(id);
	return 1;
}

public sub_playerCT_menu(id, menu, item)
{
	new var1;
	if (!is_user_alive(id) || cs_get_user_team(id, 0) == 2 || g_PlayerPoints[id] <= 0)
	{
		return 1;
	}
	new Data[7];
	new Name[64];
	new Access;
	new Callback;
	menu_item_getinfo(menu, item, Access, Data, 5, Name, 63, Callback);
	new Key = str_to_num(Data);
	switch (Key)
	{
		case 0:
		{
			menu_destroy(menu);
			return 1;
		}
		case 1:
		{
			if (2 > g_PlayerPoints[id])
			{
				return 1;
			}
			if (10 > g_SurvivorExp[id][0])
			{
				g_SurvivorExp[id]++;
				g_PlayerPoints[id] -= 2;
				ColorChat(id, Color:4, "%s Your\x04 Health\x01 has been increased by\x03 10 units\x04 (%d/10)", "\x04[\x03NC ExD\x04]\x01", g_SurvivorExp[id]);
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 will increase\x03 Next Round", "\x04[\x03NC ExD\x04]\x01");
			}
			else
			{
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 is at\x03 Maximum", "\x04[\x03NC ExD\x04]\x01");
			}
		}
		case 2:
		{
			if (10 > g_SurvivorExp[id][1])
			{
				g_SurvivorExp[id][1]++;
				g_PlayerPoints[id]--;
				ColorChat(id, Color:4, "%s Your\x04 Armour\x01 has been increased by\x03 10 units\x04 (%d/10)", "\x04[\x03NC ExD\x04]\x01", g_SurvivorExp[id][1]);
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 will increase\x03 Next Round", "\x04[\x03NC ExD\x04]\x01");
			}
			else
			{
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 is at\x03 Maximum", "\x04[\x03NC ExD\x04]\x01");
			}
		}
		case 3:
		{
			if (10 > g_SurvivorExp[id][2])
			{
				g_SurvivorExp[id][2]++;
				g_PlayerPoints[id]--;
				ColorChat(id, Color:4, "%s Your\x04 Speed\x01 has been increased by\x03 5 units\x04 (%d/10)", "\x04[\x03NC ExD\x04]\x01", g_SurvivorExp[id][2]);
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 will increase\x03 Next Round", "\x04[\x03NC ExD\x04]\x01");
			}
			else
			{
				ColorChat(id, Color:4, "%s Your\x04 Stat\x01 is at\x03 Maximum", "\x04[\x03NC ExD\x04]\x01");
			}
		}
		default:
		{
		}
	}
	menu_destroy(menu);
	Upgrade_Menu(id);
	return 1;
}

public CreateMenus()
{
	g_hWeaponMenu = menu_create("\r[NC]\yWeapons Menu:-", "WeaponMenu_Handler", 0);
	menu_additem(g_hWeaponMenu, "\wNew Weapons", 37600, 0, -1);
	menu_additem(g_hWeaponMenu, "\wPrevious Weapons", 37684, 0, -1);
	menu_additem(g_hWeaponMenu, "\wPrevious + Don't Ask", 37784, 0, -1);
	g_hPrimaryWeaponMenu = menu_create("\r[NC]\yPrimary Weapons:-", "PrimaryMenu_Handler", 0);
	g_hSecondaryWeaponMenu = menu_create("\r[NC]\ySecondary Weapons:-", "SecondaryMenu_Handler", 0);
	new szInfo[3];
	new i = 1;
	while (i <= 30)
	{
		if (1 << i & 1508700584)
		{
			num_to_str(i, szInfo, 2);
			menu_additem(g_hPrimaryWeaponMenu, g_szWeaponNames[i], szInfo, 0, -1);
		}
		else
		{
			if (1 << i & 67308546)
			{
				num_to_str(i, szInfo, 2);
				menu_additem(g_hSecondaryWeaponMenu, g_szWeaponNames[i], szInfo, 0, -1);
			}
			i++;
		}
		i++;
	}
	g_hItemsMenu = menu_create("\r[NC]\yChoose an Item:-", "ItemsMenu_Handler", 0);
	new i;
	while (i < 7)
	{
		num_to_str(i, szInfo, 2);
		if (i)
		{
			if (i == 1)
			{
				menu_additem(g_hItemsMenu, g_szItemNames[i], szInfo, 0, menu_makecallback("LaserMineItem_Callback"));
			}
			menu_additem(g_hItemsMenu, g_szItemNames[i], szInfo, 0, -1);
		}
		else
		{
			menu_additem(g_hItemsMenu, g_szItemNames[i], szInfo, 0, menu_makecallback("LaserItem_Callback"));
		}
		i++;
	}
	return 0;
}

public LaserMineItem_Callback(id, hMenu, iItem)
{
	if (g_AllowedLaserMine[id])
	{
		return 1;
	}
	return 2;
}

public LaserItem_Callback(id, hMenu, iItem)
{
	new iFrags = get_user_frags(id);
	new iDeaths = get_user_deaths(id);
	if (iFrags < 1)
	{
		return 2;
	}
	new i = 1;
	while (i <= g_iMaxPlayers)
	{
		new var1;
		if (is_user_alive(i) && cs_get_user_team(i, 0) == 2 && id != i)
		{
			new iPlayerFrags = get_user_frags(i);
			if (iPlayerFrags > iFrags)
			{
				return 2;
			}
			if (iFrags == iPlayerFrags)
			{
				if (iDeaths > get_user_deaths(i))
				{
					return 2;
				}
			}
		}
		i++;
	}
	return 1;
}

public Ham_LaserTakeDamage(iVictim, iInflictor, iAttacker, Float:flDamage, iBits)
{
	new var1;
	if (!is_valid_ent(iVictim) || !is_user_connected(iAttacker))
	{
		return 1;
	}
	new classname[32];
	pev(iVictim, 1, classname, 31);
	if (equal(classname, ENT_CLASS_NAME, 0))
	{
		new var2;
		if (is_user_connected(iAttacker) && cs_get_user_team(iAttacker, 0) != 1)
		{
			return 4;
		}
	}
	return 1;
}

public Ham_PlayerTakeDamage_Pre(iVictim, iInflictor, iAttacker, Float:flDamage, iBits)
{
	new var1;
	if (is_user_connected(iVictim) && cs_get_user_team(iVictim, 0) == 1)
	{
		if (iBits & 32)
		{
			return 4;
		}
	}
	return 1;
}

public Ham_PlayerTakeDamage_Post(iVictim, iInflictor, iAttacker, Float:flDamage, iBits)
{
	new var1;
	if (is_user_connected(iVictim) && cs_get_user_team(iVictim, 0) == 1)
	{
		if (iBits == 32)
		{
			return 4;
		}
	}
	new var2;
	if (!is_user_connected(iAttacker) || !is_user_connected(iVictim))
	{
		return 1;
	}
	if (g_IsDamageNAllowed)
	{
		return 4;
	}
	if (get_user_team(iVictim, {0}, 0) == get_user_team(iAttacker, {0}, 0))
	{
		return 4;
	}
	if (1 << iVictim & 31 & g_IsFrozen)
	{
		return 4;
	}
	if (cs_get_user_team(iVictim, 0) == 1)
	{
		remove_task(iVictim + 3000, 0);
		player_hudmessage(iVictim, 6, 3.0, 38516, "***** You Are Visible! *****");
		g_bVisible[iVictim] = 1;
		set_task(get_pcvar_float(g_pNightcrawlerVisibleTime), "Task_SetInvisible", iVictim + 3000, 25496, 0, 25500, 0);
	}
	return 1;
}

public fw_TraceAttack(victim, attacker)
{
	new var1;
	if (!is_user_connected(attacker) || !is_user_connected(victim))
	{
		return 1;
	}
	if (g_IsDamageNAllowed)
	{
		return 4;
	}
	new var2;
	if (attacker != victim && !is_user_alive(attacker))
	{
		return 1;
	}
	if (1 << victim & 31 & g_IsFrozen)
	{
		return 4;
	}
	return 1;
}

public Ham_PlayerKilled_Post(iVictim, iKiller, iShouldGib)
{
	new var1;
	if (!is_user_connected(iKiller) || !is_user_connected(iVictim) || iVictim != iKiller)
	{
		return 1;
	}
	if (1 << iVictim & 31 & g_IsFrozen)
	{
		remove_freeze(iVictim + 7000);
		remove_task(iVictim + 7000, 0);
	}
	new szKiller[35];
	new szVictim[35];
	get_user_name(iKiller, szKiller, 34);
	get_user_name(iVictim, szVictim, 34);
	switch (cs_get_user_team(iKiller, 0))
	{
		case 1:
		{
			if (cs_get_user_team(iVictim, 0) == 2)
			{
				g_iTeleportsRemaining[iKiller]++;
				player_hudmessage(0, 8, 4.0, 39060, "%s [Night-Crawler] killed %s [Human]", szKiller, szVictim);
				g_PlayerPoints[iKiller]++;
				ColorChat(iKiller, Color:4, "%s You got\x04 +1 Exp\x01 for\x03 Killing", "\x04[\x03NC ExD\x04]\x01");
			}
		}
		case 2:
		{
			if (cs_get_user_team(iVictim, 0) == 1)
			{
				g_bNCNextRound[iKiller] = 1;
				player_hudmessage(0, 8, 4.0, 38716, "%s [Human] killed %s [Night-Crawler]", szKiller, szVictim);
				g_PlayerPoints[iKiller]++;
				ColorChat(iKiller, Color:4, "%s You got\x04 +1 Exp\x01 for\x03 Killing", "\x04[\x03NC ExD\x04]\x01");
			}
		}
		default:
		{
		}
	}
	g_bIsPlanting[iVictim] = 0;
	remove_task(iVictim + 9000, 0);
	remove_task(iVictim + 10000, 0);
	remove_task(iVictim + 6000, 0);
	g_BurningDuration[iVictim] = 0;
	return 1;
}

public checkstuck()
{
	if (1 <= get_pcvar_num(UnstuckCvar[0]))
	{
		static player;
		static pnum;
		static players[32];
		get_players(players, pnum, 39540, 2176);
		static Float:origin[3];
		static hull;
		static Float:mins[3];
		static Float:vec[3];
		static i;
		static o;
		i = 0;
		while (i < pnum)
		{
			player = players[i];
			if (is_user_alive(player))
			{
				pev(player, 118, origin);
				new var1;
				if (pev(player, __dhud_x) & 16384)
				{
					var1 = 3;
				}
				else
				{
					var1 = 1;
				}
				hull = var1;
				new var2;
				if (!is_hull_vacant(origin, hull, player) && !get_user_noclip(player) && !pev(player, 70) & 0)
				{
					stuck[player]++;
					if (get_pcvar_num(UnstuckCvar[1]) <= stuck[player])
					{
						pev(player, 131, mins);
						vec[2] = origin[2];
						o = 0;
						while (o < 70)
						{
							vec[0] = floatsub(origin[0], floatmul(mins[0], size[o][0]));
							vec[1] = floatsub(origin[1], floatmul(mins[1], size[o][1]));
							vec[2] = floatsub(origin[2], floatmul(mins[2], size[o][2]));
							if (is_hull_vacant(vec, hull, player))
							{
								engfunc(26, player, vec);
								effects(player);
								set_pev(player, 120, 39592);
								o = 70;
							}
							o += 1;
						}
					}
				}
				stuck[player] = 0;
			}
			i += 1;
		}
	}
	return 0;
}

public GiveWeapons(id)
{
	new var1;
	if (is_user_alive(id) && cs_get_user_team(id, 0) == 2)
	{
		player_strip_weapons(id);
		new iPrimary = g_iPrimaryWeapon[id];
		new iSecondary = g_iSecondaryWeapon[id];
		give_item(id, g_szWeaponClassnames[iPrimary]);
		give_item(id, g_szWeaponClassnames[iSecondary]);
		cs_set_user_bpammo(id, iPrimary, g_iMaxBPAmmo[iPrimary]);
		cs_set_user_bpammo(id, iSecondary, g_iMaxBPAmmo[iSecondary]);
		g_HasGun[id] = 1;
	}
	return 0;
}

public WeaponMenu_Handler(id, hMenu, iItem)
{
	new var1;
	if (!is_user_alive(id) || cs_get_user_team(id, 0) == 2)
	{
		return 1;
	}
	switch (iItem)
	{
		case 0:
		{
			menu_display(id, g_hPrimaryWeaponMenu, 0);
		}
		case 1:
		{
			GiveWeapons(id);
			menu_display(id, g_hItemsMenu, 0);
		}
		case 2:
		{
			GiveWeapons(id);
			g_bRememberGuns[id] = 1;
			menu_display(id, g_hItemsMenu, 0);
		}
		default:
		{
		}
	}
	return 1;
}

public PrimaryMenu_Handler(id, hMenu, iItem)
{
	if (iItem == -3)
	{
		menu_display(id, g_hItemsMenu, 0);
		return 1;
	}
	new iAccess;
	new hCallback;
	new szData[6];
	menu_item_getinfo(hMenu, iItem, iAccess, szData, 5, {0}, 0, hCallback);
	g_iPrimaryWeapon[id] = str_to_num(szData);
	menu_display(id, g_hSecondaryWeaponMenu, 0);
	return 1;
}

public SecondaryMenu_Handler(id, hMenu, iItem)
{
	if (iItem == -3)
	{
		menu_display(id, g_hItemsMenu, 0);
		return 1;
	}
	new iAccess;
	new hCallback;
	new szData[6];
	menu_item_getinfo(hMenu, iItem, iAccess, szData, 5, {0}, 0, hCallback);
	g_iSecondaryWeapon[id] = str_to_num(szData);
	GiveWeapons(id);
	menu_display(id, g_hItemsMenu, 0);
	return 1;
}

public show_itemmenu(id)
{
	new var1;
	if (is_user_alive(id) && cs_get_user_team(id, 0) == 2)
	{
		if (g_iChosenItem[id] == -1)
		{
			menu_display(id, g_hItemsMenu, 0);
		}
	}
	return 0;
}

public ItemsMenu_Handler(id, hMenu, iItem)
{
	if (iItem == -3)
	{
		return 1;
	}
	new var1;
	if (!is_user_alive(id) || cs_get_user_team(id, 0) == 2)
	{
		return 1;
	}
	switch (iItem)
	{
		case 0:
		{
			g_bHasLaser[id] = 1;
			g_iChosenItem[id] = 0;
		}
		case 1:
		{
			ColorChat(id, Color:4, "%s To use your\x04 Laser Mine\x01 aim and press\x03 'F' key", "\x04[\x03NC ExD\x04]\x01");
			g_bHasMine[id] = 2;
			g_iChosenItem[id] = 1;
		}
		case 2:
		{
			ColorChat(id, Color:4, "%s Use your\x04 Flashlight 'f'\x01 to start the\x03 Countdown", "\x04[\x03NC ExD\x04]\x01");
			g_iChosenItem[id] = 2;
		}
		case 3:
		{
			ColorChat(id, Color:4, "%s Use your\x04 Flashlight 'f'\x01 key to inject\x03 Adrenaline", "\x04[\x03NC ExD\x04]\x01");
			g_iAdrenalineUses[id] = get_pcvar_num(g_pAdrenalineUses);
			g_iChosenItem[id] = 3;
		}
		case 4:
		{
			ColorChat(id, Color:4, "%s Use your\x04 Flashlight 'f'\x01 key to use a\x03 Medical kit", "\x04[\x03NC ExD\x04]\x01");
			g_iMedKitUses[id] = get_pcvar_num(g_pMedKitUses);
			g_iChosenItem[id] = 4;
		}
		case 5:
		{
			give_item(id, "weapon_flashbang");
			give_item(id, "weapon_flashbang");
			ColorChat(id, Color:4, "%s You Have been given\x04 2 Frost\x03 Grenades", "\x04[\x03NC ExD\x04]\x01");
			g_iChosenItem[id] = 5;
		}
		case 6:
		{
			give_item(id, "weapon_hegrenade");
			cs_set_user_bpammo(id, "DeathMsg", 2);
			ColorChat(id, Color:4, "%s You Have been given\x04 2 Fire\x03 Grenades", "\x04[\x03NC ExD\x04]\x01");
			g_iChosenItem[id] = 6;
		}
		default:
		{
		}
	}
	return 1;
}

public CmdUseItem(id)
{
	new var1;
	if (!is_user_alive(id) || g_IsDamageNAllowed)
	{
		return 1;
	}
	switch (cs_get_user_team(id, 0))
	{
		case 1:
		{
			if (0 < g_iTeleportsRemaining[id])
			{
				new Float:flGameTime = get_gametime();
				new iDelay = get_pcvar_num(g_pNightcrawlerTeleDelay);
				if (floatsub(flGameTime, g_flLastTeleportTime[id]) < iDelay)
				{
					ColorChat(id, Color:4, "%s You must wait\x04 %i seconds\x01 in between\x03 Teleports.", "\x04[\x03NC ExD\x04]\x01", iDelay);
					return 1;
				}
				if (TeleportPlayer(id))
				{
					g_iTeleportsRemaining[id]--;
					g_flLastTeleportTime[id] = get_gametime();
					TeleportPlayer(id);
					ColorChat(id, Color:4, "%s You Have been\x04 Teleported !!!", "\x04[\x03NC ExD\x04]\x01");
					player_hudmessage(id, 6, 3.0, 41760, "***** You Have been teleported *****");
				}
			}
		}
		case 2:
		{
			switch (g_iChosenItem[id])
			{
				case 1:
				{
					new tgt;
					new body;
					new EntityName[32];
					get_user_aiming(id, tgt, body, 9999);
					pev(tgt, 1, EntityName, 31);
					new var2;
					if (pev_valid(tgt) && equal(EntityName, ENT_CLASS_NAME, 0))
					{
						ReturnLaserMine_Progress(id);
					}
					else
					{
						if (0 < g_bHasMine[id])
						{
							if (!g_bIsPlanting[id])
							{
								CreateLaserMine_Progress(id);
							}
						}
					}
				}
				case 2:
				{
					if (task_exists(id + 2000, 0))
					{
						return 1;
					}
					g_iSuicideTime[id] = get_pcvar_num(g_pSuicideTime);
					Task_Suicide(id + 2000);
					set_task(1065353216, "Task_Suicide", id + 2000, 25496, 0, 42844, g_iSuicideTime[id]);
					ColorChat(id, Color:4, "%s Timer Has been\x04 started !!,\x03 Bye.....", "\x04[\x03NC ExD\x04]\x01");
					player_hudmessage(id, 8, 3.0, 43068, "***** Timer Has been started *****");
				}
				case 3:
				{
					if (g_bAdrenalineActive[id])
					{
						ColorChat(id, Color:4, "%s\x04 Adrenaline\x01 is already\x03 active!", "\x04[\x03NC ExD\x04]\x01");
					}
					else
					{
						if (0 < g_iAdrenalineUses[id])
						{
							g_iAdrenalineUses[id]--;
							ColorChat(id, Color:4, "%s You have injected\x04 Adrenaline!", "\x04[\x03NC ExD\x04]\x01");
							player_hudmessage(id, 6, 3.0, 42304, "***** You have injected adrenaline *****");
							g_bAdrenalineActive[id] = 1;
							set_pev(id, 56, g_SurvivorStats[id][2][get_pcvar_float(g_pAdrenalineSpeed)]);
							set_task(get_pcvar_float(g_pAdrenalineTime), "Task_RemoveAdrenaline", id + 1000, 25496, 0, 25500, 0);
						}
					}
				}
				case 4:
				{
					if (0 < g_iMedKitUses[id])
					{
						g_iMedKitUses[id]--;
						ColorChat(id, Color:4, "%s You have used one of your\x04 Medical kits", "\x04[\x03NC ExD\x04]\x01");
						set_user_health(id, __dhud_holdtime);
					}
				}
				default:
				{
				}
			}
		}
		default:
		{
		}
	}
	return 1;
}

public Task_SetInvisible(iTaskID)
{
	new id = iTaskID + -3000;
	g_bVisible[id] = 0;
	player_hudmessage(id, 6, 3.0, 43220, "***** You Are Invisible Again *****");
	return 0;
}

public Task_Suicide(iTaskID)
{
	new id = iTaskID + -2000;
	new var1 = g_iSuicideTime[id];
	var1--;
	if (0 >= var1)
	{
		new Float:flOrigin[3] = 0.0;
		pev(id, 118, flOrigin);
		user_silentkill(id);
		message_begin(0, 23, 2180, 0);
		write_byte("");
		write_coord(floatround(flOrigin[0], 0));
		write_coord(floatround(flOrigin[1], 0));
		write_coord(floatround(flOrigin[2], 0));
		write_short(g_iExpSprite);
		write_byte(30);
		write_byte(30);
		write_byte(0);
		message_end();
		fm_radius_damage(id, flOrigin, get_pcvar_float(g_pSuicideDamage), get_pcvar_float(g_pSuicideRadius));
		new name[32];
		get_user_name(id, name, 31);
		player_hudmessage(0, 8, 4.0, 43376, "***** %s Suicided ..... BYE *****", name);
	}
	else
	{
		new var2 = g_szNcSoundFiles;
		emit_sound(id, "", var2[0][var2], 1065353216, 1061997773, 0, __dhud_holdtime);
	}
	return 0;
}

public Task_RemoveAdrenaline(iTaskID)
{
	new id = iTaskID + -1000;
	g_bAdrenalineActive[id] = 0;
	if (is_user_alive(id))
	{
		set_user_maxspeed(id, 1131413504);
		Event_CurWeapon(id);
	}
	ColorChat(id, Color:4, "%s Your\x04 Adrenaline\x01 has been\x03 finished!!", "\x04[\x03NC ExD\x04]\x01");
	player_hudmessage(id, 6, 3.0, 43744, "***** Your Adrenaline has been finished *****");
	return 0;
}

public Forward_AddToFullPack_Post(es, e, iEntity, iHost, iHostFlags, iPlayer, pSet)
{
	new var1;
	if (is_user_alive(iEntity) && is_user_alive(iHost) && cs_get_user_team(iEntity, 0) == 1 && cs_get_user_team(iHost, 0) == 2 && !1 << iEntity & 31 & g_IsFrozen && !task_exists(iEntity + 6000, 0))
	{
		set_es(es, 15, 5);
		if (g_bVisible[iEntity])
		{
			set_es(es, 16, 255);
		}
		set_es(es, 16, 0);
	}
	return 0;
}

public CmdEnableGuns(id)
{
	if (g_bRememberGuns[id])
	{
		ColorChat(id, Color:4, "%s Your gun menu has been\x04 re-enabled.", "\x04[\x03NC ExD\x04]\x01");
		g_bRememberGuns[id] = 0;
	}
	else
	{
		ColorChat(id, Color:4, "%s Your gun menu is already\x04 enabled!", "\x04[\x03NC ExD\x04]\x01");
	}
	if (!g_HasGun[id])
	{
		if (g_bRememberGuns[id])
		{
			GiveWeapons(id);
			set_task(1073741824, "show_itemmenu", id, 25496, 0, 25500, 0);
		}
		new var1;
		if (g_iPrimaryWeapon[id] && g_iSecondaryWeapon[id])
		{
			menu_display(id, g_hPrimaryWeaponMenu, 0);
		}
		menu_display(id, g_hWeaponMenu, 0);
	}
	return 0;
}

public CreateLaserMine_Progress(id)
{
	if (!CreateCheck(id))
	{
		return 1;
	}
	g_bIsPlanting[id] = 1;
	message_begin(1, __dhud_fadeouttime, 44408, id);
	write_byte(1);
	write_byte(0);
	message_end();
	g_bIsPlanting[id] = 1;
	set_task(1067030938, "SpawnMine", id + 9000, 25496, 0, 25500, 0);
	return 1;
}

bool:CreateCheck(id)
{
	if (g_iChosenItem[id] != 1)
	{
		return false;
	}
	new Float:vTraceDirection[3] = 0.0;
	new Float:vTraceEnd[3] = 0.0;
	new Float:vOrigin[3] = 0.0;
	pev(id, 118, vOrigin);
	velocity_by_aim(id, 128, vTraceDirection);
	xs_vec_add(vTraceDirection, vOrigin, vTraceEnd);
	engfunc(29, vOrigin, vTraceEnd, 0, id, 0);
	new Float:fFraction = 0.0;
	new Float:vTraceNormal[3] = 0.0;
	get_tr2(0, "DeathMsg", fFraction);
	if (fFraction < 1.0)
	{
		get_tr2(0, 5, vTraceEnd);
		get_tr2(0, 7, vTraceNormal);
		return true;
	}
	ColorChat(id, Color:4, "%s You must plant\x04 Laser mine\x03 On wall", "\x04[\x03NC ExD\x04]\x01");
	g_bIsPlanting[id] = 0;
	remove_task(id + 9000, 0);
	remove_task(id + 10000, 0);
	return false;
}

public SpawnMine(id)
{
	if (!is_user_alive(id))
	{
		return 2;
	}
	new i_Ent = engfunc(21, g_EntMine);
	if (!i_Ent)
	{
		ColorChat(id, Color:4, "%s Can't Create\x04 Laser mine", "\x04[\x03NC ExD\x04]\x01");
		g_bIsPlanting[id] = 0;
		remove_task(id + 9000, 0);
		remove_task(id + 10000, 0);
		return 2;
	}
	set_pev(i_Ent, 1, ENT_CLASS_NAME);
	engfunc(2, i_Ent, g_szNcModelFiles[2]);
	set_pev(i_Ent, 70, 0);
	set_pev(i_Ent, 69, 5);
	set_pev(i_Ent, 36, 0);
	set_pev(i_Ent, 72, 3);
	set_pev(i_Ent, 75, 7);
	set_pev(i_Ent, 38, 0);
	set_pev(i_Ent, 43, 1065353216);
	set_pev(i_Ent, 50, 1120403456);
	set_pev(i_Ent, 41, 1195593728);
	new Float:vOrigin[3] = 0.0;
	new Float:vNewOrigin[3] = 0.0;
	new Float:vNormal[3] = 0.0;
	new Float:vTraceDirection[3] = 0.0;
	new Float:vTraceEnd[3] = 0.0;
	new Float:vEntAngles[3] = 0.0;
	pev(id, 118, vOrigin);
	velocity_by_aim(id, 128, vTraceDirection);
	xs_vec_add(vTraceDirection, vOrigin, vTraceEnd);
	engfunc(29, vOrigin, vTraceEnd, 0, id, 0);
	new Float:fFraction = 0.0;
	get_tr2(0, "DeathMsg", fFraction);
	if (fFraction < 1.0)
	{
		get_tr2(0, 5, vTraceEnd);
		get_tr2(0, 7, vNormal);
	}
	xs_vec_mul_scalar(vNormal, 8.0, vNormal);
	xs_vec_add(vTraceEnd, vNormal, vNewOrigin);
	engfunc(5, i_Ent, 44832, 44844);
	engfunc(26, i_Ent, vNewOrigin);
	vector_to_angle(vNormal, vEntAngles);
	set_pev(i_Ent, 124, vEntAngles);
	new Float:vBeamEnd[3] = 0.0;
	new Float:vTracedBeamEnd[3] = 0.0;
	xs_vec_mul_scalar(vNormal, 8192.0, vNormal);
	xs_vec_add(vNewOrigin, vNormal, vBeamEnd);
	engfunc(29, vNewOrigin, vBeamEnd, 1, -1, 0);
	get_tr2(0, 7, vNormal);
	get_tr2(0, 5, vTracedBeamEnd);
	set_pev(i_Ent, 101, id);
	set_pev(i_Ent, 136, vTracedBeamEnd);
	new Float:fCurrTime = get_gametime();
	set_pev(i_Ent, 60, floatadd(1075838976, fCurrTime));
	set_pev(i_Ent, 102, 0);
	set_pev(i_Ent, 33, floatadd(1045220557, fCurrTime));
	PlaySound(i_Ent, 0);
	g_bHasMine[id]--;
	g_bIsPlanting[id] = 0;
	remove_task(id + 9000, 0);
	remove_task(id + 10000, 0);
	return 1;
}

public ltm_PostThink(id)
{
	new var1;
	if (!g_bIsPlanting[id] && plspeed[id])
	{
		set_pev(id, 56, plspeed[id]);
		plspeed[id] = 0;
	}
	else
	{
		new var2;
		if (g_bIsPlanting[id] && !plspeed[id])
		{
			pev(id, 56, plspeed[id]);
			set_pev(id, 56, 1065353216);
		}
	}
	return 1;
}

public ReturnLaserMine_Progress(id)
{
	if (!ReturnCheck(id))
	{
		return 1;
	}
	g_bIsPlanting[id] = 1;
	message_begin(1, __dhud_fadeouttime, 44856, id);
	write_byte(1);
	write_byte(0);
	message_end();
	set_task(1067030938, "ReturnMine", id + 10000, 25496, 0, 25500, 0);
	return 1;
}

bool:ReturnCheck(id)
{
	if (g_iChosenItem[id] != 1)
	{
		return false;
	}
	new tgt;
	new body;
	new Float:vo[3] = 0.0;
	new Float:to[3] = 0.0;
	get_user_aiming(id, tgt, body, 9999);
	if (!pev_valid(tgt))
	{
		return false;
	}
	pev(id, 118, vo);
	pev(tgt, 118, to);
	if (get_distance_f(vo, to) > 1116471296)
	{
		return false;
	}
	new EntityName[32];
	pev(tgt, 1, EntityName, 31);
	if (!equal(EntityName, ENT_CLASS_NAME, 0))
	{
		return false;
	}
	if (id != pev(tgt, 101))
	{
		return false;
	}
	return true;
}

public ReturnMine(id)
{
	if (!is_user_alive(id))
	{
		return 0;
	}
	new tgt;
	new body;
	new Float:vo[3] = 0.0;
	new Float:to[3] = 0.0;
	get_user_aiming(id, tgt, body, 9999);
	if (!pev_valid(tgt))
	{
		return 0;
	}
	pev(id, 118, vo);
	pev(tgt, 118, to);
	if (get_distance_f(vo, to) > 1116471296)
	{
		return 0;
	}
	new EntityName[32];
	pev(tgt, 1, EntityName, 31);
	if (!equal(EntityName, ENT_CLASS_NAME, 0))
	{
		return 0;
	}
	if (id != pev(tgt, 101))
	{
		return 0;
	}
	engfunc(20, tgt);
	g_bHasMine[id]++;
	g_bIsPlanting[id] = 0;
	emit_sound(id, "", g_szLaserSounds[4], 1065353216, 1061997773, 0, __dhud_holdtime);
	return 0;
}

public ltm_Think(i_Ent)
{
	if (!pev_valid(i_Ent))
	{
		return 1;
	}
	new EntityName[32];
	new IsEnemyFront[33];
	pev(i_Ent, 1, EntityName, 31);
	if (!equal(EntityName, ENT_CLASS_NAME, 0))
	{
		return 1;
	}
	static Float:fCurrTime;
	fCurrTime = get_gametime();
	switch (pev(i_Ent, 102))
	{
		case 0:
		{
			new Float:fPowerupTime = 0.0;
			pev(i_Ent, 60, fPowerupTime);
			if (fCurrTime > fPowerupTime)
			{
				set_pev(i_Ent, 70, 2);
				set_pev(i_Ent, 102, 1);
				PlaySound(i_Ent, 1);
			}
			set_rendering(i_Ent, 19, 141, 56, 201, 0, 5);
			set_pev(i_Ent, 33, floatadd(1036831949, fCurrTime));
		}
		case 1:
		{
			static Float:vOrigin[3];
			static Float:vEnd[3];
			pev(i_Ent, 118, vOrigin);
			pev(i_Ent, 136, vEnd);
			static Float:fFraction;
			static iHit;
			engfunc(29, vOrigin, vEnd, 0, i_Ent, 0);
			get_tr2(0, "DeathMsg", fFraction);
			iHit = get_tr2(0, 8);
			if (fFraction < 1.0)
			{
				if (pev_valid(iHit))
				{
					pev(iHit, 1, EntityName, 31);
					if (!equal(EntityName, ENT_CLASS_NAME, 0))
					{
						new var1;
						if (is_user_alive(iHit) && cs_get_user_team(iHit, 0) == 1)
						{
							IsEnemyFront[pev(i_Ent, 101)] = 1;
						}
						else
						{
							IsEnemyFront[pev(i_Ent, 101)] = 0;
						}
						set_pev(i_Ent, 16, iHit);
						set_pev(i_Ent, 33, floatadd(fCurrTime, random_float(1036831949, 1050253722)));
					}
				}
			}
			if (pev_valid(i_Ent))
			{
				static Float:fHealth;
				pev(i_Ent, 41, fHealth);
				new var2;
				if (fHealth <= 0.0 || pev(i_Ent, __dhud_x) & 1073741824)
				{
					set_pev(i_Ent, 102, 2);
					set_pev(i_Ent, 33, floatadd(fCurrTime, random_float(1036831949, 1050253722)));
				}
				static Float:fBeamthink;
				pev(i_Ent, 61, fBeamthink);
				if (fBeamthink < fCurrTime)
				{
					if (IsEnemyFront[pev(i_Ent, 101)])
					{
						emit_sound(i_Ent, "", g_szNcSoundFiles[3], 1065353216, 1061997773, 0, __dhud_holdtime);
						DrawLaser(vOrigin, vEnd, 255, 0, 0);
					}
					else
					{
						DrawLaser(vOrigin, vEnd, 141, 56, 201);
					}
					set_pev(i_Ent, 61, floatadd(1036831949, fCurrTime));
				}
				set_pev(i_Ent, 33, floatadd(1008981770, fCurrTime));
			}
		}
		case 2:
		{
			set_pev(i_Ent, 33, 0);
			PlaySound(i_Ent, 2);
			if (is_user_alive(pev(i_Ent, 101)))
			{
				g_bHasMine[pev(i_Ent, 101)]++;
			}
			CreateExplosion(i_Ent);
			engfunc(20, i_Ent);
		}
		default:
		{
		}
	}
	return 1;
}

public set_client_kv(id, info[], key[])
{
	if (!is_user_connected(id))
	{
		return 1;
	}
	new var1;
	if (equal(key, "model", 0) && cs_get_user_team(id, 0) != 2)
	{
		return 4;
	}
	return 1;
}

public Message_StatusIcon(iMsgID, iMsgDest, id)
{
	static szIcon[8];
	get_msg_arg_string(2, szIcon, 7);
	new var1;
	if (equal(szIcon, "buyzone", 0) && get_msg_arg_int(1))
	{
		set_pdata_int(id, 235, get_pdata_int(id, 235, 5) & -2, 5);
		return 1;
	}
	return 0;
}

public msg_StatusValue(msgId, dest, id)
{
	new var1;
	if (!is_user_connected(id) || cs_get_user_team(id, 0) == 2)
	{
		return 0;
	}
	new flag = get_msg_arg_int(1);
	new value = get_msg_arg_int(2);
	if (flag == 2)
	{
		if (0 < value)
		{
			if (is_user_connected(value))
			{
				if (cs_get_user_team(value, 0) == 1)
				{
					ClearStatusValue(id);
					return 1;
				}
			}
		}
	}
	return 0;
}

public ClearStatusValue(iClient)
{
	message_begin(8, g_hStatusValue, 2180, iClient);
	write_byte(1);
	write_short(0);
	message_end();
	message_begin(8, g_hStatusValue, 2180, iClient);
	write_byte(2);
	write_short(0);
	message_end();
	message_begin(8, g_hStatusValue, 2180, iClient);
	write_byte("");
	write_short(0);
	message_end();
	return 0;
}

public msg_clcorpse(msgid, dest, id)
{
	return 1;
}

public CmdJoinTeam(id)
{
	return 1;
}

public TeamSelectMenu_Handler(id, iKey)
{
	new CsTeams:iTeam = cs_get_user_team(id, 0);
	CountTeams();
	switch (iKey)
	{
		case 0:
		{
			if (iTeam == CsTeams:1)
			{
				return 1;
			}
			if (task_exists(4000, 0))
			{
				ForceTeam(id, CsTeams:1);
				return 1;
			}
			ForceTeam(id, CsTeams:2);
			client_print(id, "DeathMsg", "You cannot join the Night-Crawler team!");
			return 1;
		}
		case 1:
		{
			if (iTeam == CsTeams:2)
			{
				return 1;
			}
			if (!task_exists(4000, 0))
			{
				ForceTeam(id, CsTeams:2);
			}
			else
			{
				new var1;
				if (g_iTeamCount[1] <= 1 && g_iTeamCount[2] >= 1)
				{
					ForceTeam(id, CsTeams:1);
				}
				ForceTeam(id, CsTeams:2);
			}
			return 1;
		}
		case 5:
		{
			user_silentkill(id);
			ForceTeam(id, CsTeams:3);
			return 1;
		}
		default:
		{
			return 1;
		}
	}
}

public ForceTeam(id, CsTeams:iTeam)
{
	static iMSGBlock;
	static iVGUI;
	static iRestore;
	iRestore = get_pdata_int(id, 510, 5);
	iVGUI = iRestore & 1;
	if (iVGUI)
	{
		set_pdata_int(id, 510, iRestore & -2, 5);
	}
	switch (iTeam)
	{
		case 1, 2:
		{
			iMSGBlock = get_msg_block(g_msgShowMenu);
			set_msg_block(g_msgShowMenu, 1);
			new var1;
			if (iTeam == CsTeams:2)
			{
				var1 = 45300;
			}
			else
			{
				var1 = 45308;
			}
			engclient_cmd(id, "jointeam", var1, 45260);
			engclient_cmd(id, "joinclass", 45356, 45260);
			set_msg_block(g_msgShowMenu, iMSGBlock);
		}
		case 3:
		{
			iMSGBlock = get_msg_block(g_msgShowMenu);
			set_msg_block(g_msgShowMenu, 1);
			dllfunc(11, id);
			set_msg_block(g_msgShowMenu, iMSGBlock);
			set_pdata_int(id, 349, 1, 5);
			engclient_cmd(id, "jointeam", 45252, 45260);
		}
		default:
		{
		}
	}
	if (iVGUI)
	{
		set_pdata_int(id, 510, iRestore, 5);
	}
	return 0;
}

public Message_VGUIMenu(iMSGId, iDest, id)
{
	static iMSGArg1;
	iMSGArg1 = get_msg_arg_int(1);
	if (iMSGArg1 == 2)
	{
		show_menu(id, 51, "#Team_Select_Spect", -1, 45444);
		return 1;
	}
	return 0;
}

public Message_ShowMenu(iMSGId, iDest, id)
{
	static iMSGArg1;
	iMSGArg1 = get_msg_arg_int(1);
	new var1;
	if (iMSGArg1 != 531 && iMSGArg1 != 563)
	{
		return 0;
	}
	show_menu(id, 51, "#Team_Select_Spect", -1, 45444);
	return 1;
}

bool:is_hull_vacant(Float:origin[3], hull, id)
{
	static tr;
	engfunc(32, origin, origin, 0, hull, id, tr);
	new var1;
	if (!get_tr2(tr, 1) || !get_tr2(tr, 0))
	{
		return true;
	}
	return false;
}

public effects(id)
{
	set_hudmessage(255, 150, 50, -1082130432, 1059481190, 0, 1086324736, 1069547520, 1036831949, 1060320051, "DeathMsg");
	show_hudmessage(id, "You should be unstucked now!");
	message_begin(8, 105, 45648, id);
	write_short(1024);
	write_short(1024);
	write_short(2);
	write_byte(20);
	write_byte(255);
	write_byte(255);
	write_byte(255);
	message_end();
	client_cmd(id, "spk fvox/blip.wav");
	return 0;
}

public fw_ResetMaxSpeed_Post(id)
{
	new var1;
	if (is_user_alive(id) && 1 << id & 31 & g_IsFrozen)
	{
		set_user_maxspeed(id, 1065353216);
	}
	return 0;
}

public fw_SetModel(entity, model[])
{
	if (!pev_valid(entity))
	{
		return 1;
	}
	static Float:dmgtime;
	pev(entity, 51, dmgtime);
	if (0.0 == dmgtime)
	{
		return 1;
	}
	if (equali(model, "models/w_flashbang.mdl", 0))
	{
		fm_set_rendering(entity, 19, 0, 50, 220, 0, 20);
		message_begin(0, 23, 2180, 0);
		write_byte(22);
		write_short(entity);
		write_short(g_iTrailSpr);
		write_byte(10);
		write_byte(10);
		write_byte(0);
		write_byte(50);
		write_byte(220);
		write_byte(200);
		message_end();
		entity_set_model(entity, g_szNadeModelFiles[3]);
		set_pev(entity, 93, 3333);
		return 4;
	}
	if (equali(model, "models/w_hegrenade.mdl", 0))
	{
		fm_set_rendering(entity, 19, 210, 0, 0, 0, 20);
		message_begin(0, 23, 2180, 0);
		write_byte(22);
		write_short(entity);
		write_short(g_iTrailSpr);
		write_byte(10);
		write_byte(10);
		write_byte(210);
		write_byte(0);
		write_byte(0);
		write_byte(200);
		message_end();
		entity_set_model(entity, g_szNadeModelFiles[2]);
		set_pev(entity, 93, 2222);
		return 4;
	}
	return 1;
}

public fw_ThinkGrenade(entity)
{
	if (!pev_valid(entity))
	{
		return 1;
	}
	static Float:dmgtime;
	pev(entity, 51, dmgtime);
	if (dmgtime > get_gametime())
	{
		return 1;
	}
	if (pev(entity, 93) == 3333)
	{
		new owner = pev(entity, 18);
		frost_explode(entity, owner);
		return 4;
	}
	if (pev(entity, 93) == 2222)
	{
		new owner = pev(entity, 18);
		fire_explode(entity, owner);
		engfunc(20, entity);
		return 4;
	}
	return 1;
}

public remove_freeze(taskid)
{
	if (!is_user_connected(taskid + -7000))
	{
		return 0;
	}
	g_IsFrozen = ~1 << taskid + -7000 & 31 & g_IsFrozen;
	set_pev(taskid + -7000, 34, g_FrozenGravity[taskid + -7000]);
	ExecuteHamB(Ham_Player_ResetMaxSpeed, taskid + -7000);
	fm_set_rendering_float(taskid + -7000, g_FrozenRenderingFx[taskid + -7000], g_FrozenRenderingColor[taskid + -7000], g_FrozenRenderingRender[taskid + -7000], g_FrozenRenderingAmount[taskid + -7000]);
	message_begin(1, g_MsgScreenFade, 2180, taskid + -7000);
	write_short(4096);
	write_short(0);
	write_short(0);
	write_byte(0);
	write_byte(50);
	write_byte(200);
	write_byte(__dhud_holdtime);
	message_end();
	emit_sound(taskid + -7000, "DeathMsg", g_szFrostSounds[2], 1065353216, 1061997773, 0, __dhud_holdtime);
	static origin[3];
	get_user_origin(taskid + -7000, origin, 0);
	message_begin("DeathMsg", 23, origin, 0);
	write_byte(__dhud_fadeouttime);
	write_coord(origin[0]);
	write_coord(origin[1]);
	write_coord(origin[2] + 24);
	write_coord(16);
	write_coord(16);
	write_coord(16);
	write_coord(random_num(-50, 50));
	write_coord(random_num(-50, 50));
	write_coord(25);
	write_byte(10);
	write_short(g_iGlassSpr);
	write_byte(10);
	write_byte(25);
	write_byte(1);
	message_end();
	return 0;
}

public PlayerFrostTrail(id)
{
	new var1;
	if (g_iFrostTime[id] > 28 || !is_user_alive(id))
	{
		g_iFrostTime[id] = 0;
		message_begin(0, 23, 2180, 0);
		write_byte(99);
		write_short(id);
		message_end();
		return 0;
	}
	message_begin(0, 23, 2180, 0);
	write_byte(22);
	write_short(id);
	write_short(g_iTrailSpr);
	write_byte(10);
	write_byte(10);
	write_byte(0);
	write_byte(__dhud_holdtime);
	write_byte(200);
	write_byte(200);
	message_end();
	g_iFrostTime[id]++;
	set_task(1045220557, "PlayerFrostTrail", id, 25496, 0, 25500, 0);
	return 0;
}

frost_explode(ent, owner)
{
	static Float:origin[3];
	pev(ent, 118, origin);
	create_blast3(origin);
	new var2 = g_szFrostSounds;
	emit_sound(ent, 1, var2[0][var2], 1065353216, 1061997773, 0, __dhud_holdtime);
	new victim = -1;
	while ((victim = engfunc(14, victim, origin, 1131413504)))
	{
		new var1;
		if (!(!is_user_alive(victim) || 1 << victim & 31 & g_IsFrozen || get_user_team(victim, {0}, 0) != get_user_team(owner, {0}, 0)))
		{
			message_begin(8, g_MsgDamage, 2180, victim);
			write_byte(0);
			write_byte(0);
			write_long(16384);
			write_coord(0);
			write_coord(0);
			write_coord(0);
			message_end();
			g_IsFrozen = 1 << victim & 31 | g_IsFrozen;
			set_task(1045220557, "PlayerFrostTrail", victim, 25496, 0, 25500, 0);
			emit_sound(victim, "DeathMsg", g_szFrostSounds[1], 1065353216, 1061997773, 0, __dhud_holdtime);
			message_begin(1, g_MsgScreenFade, 2180, victim);
			write_short(0);
			write_short(0);
			write_short("DeathMsg");
			write_byte(0);
			write_byte(50);
			write_byte(200);
			write_byte(__dhud_holdtime);
			message_end();
			ApplyFrozenRendering(victim);
			ApplyFrozenGravity(victim);
			ExecuteHamB(Ham_Player_ResetMaxSpeed, victim);
			set_task(get_pcvar_float(g_pFrostDuration), "remove_freeze", victim + 7000, 25496, 0, 25500, 0);
		}
	}
	engfunc(20, ent);
	return 0;
}

ApplyFrozenGravity(id)
{
	new Float:gravity = get_user_gravity(id);
	new var1;
	if (999999.9 == gravity || 1.0E-6 == gravity)
	{
		return 0;
	}
	g_FrozenGravity[id] = gravity;
	if (pev(id, __dhud_x) & 512)
	{
		set_user_gravity(id, 1232348158);
	}
	else
	{
		set_user_gravity(id, 897988541);
	}
	return 0;
}

ApplyFrozenRendering(id)
{
	new rendering_fx = pev(id, 78);
	new Float:rendering_color[3] = 0.0;
	pev(id, 134, rendering_color);
	new rendering_render = pev(id, 77);
	new Float:rendering_amount = 0.0;
	pev(id, "HamFilter", rendering_amount);
	new var1;
	if (rendering_fx == 19 && 0.0 == rendering_color[0] && 100.0 == rendering_color[1] && 200.0 == rendering_color[2] && rendering_render && 25.0 == rendering_amount)
	{
		return 0;
	}
	g_FrozenRenderingFx[id] = pev(id, 78);
	pev(id, 134, g_FrozenRenderingColor[id]);
	g_FrozenRenderingRender[id] = pev(id, 77);
	pev(id, "HamFilter", g_FrozenRenderingAmount[id]);
	fm_set_rendering(id, 19, 0, 100, 200, 0, 25);
	return 0;
}

create_blast3(Float:originF[3])
{
	engfunc(70, 4, 23, originF, 0);
	write_byte(21);
	engfunc(71, originF);
	engfunc(71, originF[1]);
	engfunc(71, originF[2]);
	engfunc(71, originF);
	engfunc(71, originF[1]);
	engfunc(71, floatadd(1136689152, originF[2]));
	write_short(g_iExplSpr);
	write_byte(0);
	write_byte(0);
	write_byte("DeathMsg");
	write_byte(60);
	write_byte(0);
	write_byte(0);
	write_byte(__dhud_holdtime);
	write_byte(200);
	write_byte(200);
	write_byte(0);
	message_end();
	engfunc(70, 4, 23, originF, 0);
	write_byte(21);
	engfunc(71, originF);
	engfunc(71, originF[1]);
	engfunc(71, originF[2]);
	engfunc(71, originF);
	engfunc(71, originF[1]);
	engfunc(71, floatadd(1139474432, originF[2]));
	write_short(g_iExplSpr);
	write_byte(0);
	write_byte(0);
	write_byte("DeathMsg");
	write_byte(60);
	write_byte(0);
	write_byte(0);
	write_byte(__dhud_holdtime);
	write_byte(200);
	write_byte(200);
	write_byte(0);
	message_end();
	engfunc(70, 4, 23, originF, 0);
	write_byte(21);
	engfunc(71, originF);
	engfunc(71, originF[1]);
	engfunc(71, originF[2]);
	engfunc(71, originF);
	engfunc(71, originF[1]);
	engfunc(71, floatadd(1141555200, originF[2]));
	write_short(g_iExplSpr);
	write_byte(0);
	write_byte(0);
	write_byte("DeathMsg");
	write_byte(60);
	write_byte(0);
	write_byte(0);
	write_byte(__dhud_holdtime);
	write_byte(200);
	write_byte(200);
	write_byte(0);
	message_end();
	return 0;
}

fire_explode(ent, owner)
{
	static Float:origin[3];
	pev(ent, 118, origin);
	create_blast2(origin);
	emit_sound(ent, 1, g_szNcSoundFiles[2], 1065353216, 1061997773, 0, __dhud_holdtime);
	new victim = -1;
	while ((victim = engfunc(14, victim, origin, 1131413504)))
	{
		new var1;
		if (!(!is_user_alive(victim) || get_user_team(victim, {0}, 0) != get_user_team(owner, {0}, 0)))
		{
			message_begin(8, g_MsgDamage, 2180, victim);
			write_byte(0);
			write_byte(0);
			write_long(8);
			write_coord(0);
			write_coord(0);
			write_coord(0);
			message_end();
			new var2 = g_BurningDuration[victim];
			var2 = var2[get_pcvar_num(g_pFireDuration) * 5];
			remove_task(victim + 6000, 0);
			set_task(1045220557, "burning_flame", victim + 6000, 25496, 0, 46208, 0);
		}
	}
	return 0;
}

public burning_flame(taskid)
{
	static origin[3];
	get_user_origin(taskid + -6000, origin, 0);
	new flags = pev(taskid + -6000, __dhud_x);
	new var1;
	if (flags & 16 || g_BurningDuration[taskid + -6000] < 1)
	{
		message_begin("DeathMsg", 23, origin, 0);
		write_byte(5);
		write_coord(origin[0]);
		write_coord(origin[1]);
		write_coord(origin[2] - 50);
		write_short(g_iSmokeSpr);
		write_byte(random_num(15, 20));
		write_byte(random_num(10, 20));
		message_end();
		remove_task(taskid, 0);
		g_BurningDuration[taskid + -6000] = 0;
		return 0;
	}
	if (get_pcvar_num(g_pFireDamagemax) < get_user_health(taskid + -6000))
	{
		set_user_health(taskid + -6000, get_user_health(taskid + -6000) - get_pcvar_num(g_pFireDamage));
	}
	else
	{
		g_BurningDuration[taskid + -6000] = 1;
	}
	message_begin("DeathMsg", 23, origin, 0);
	write_byte(17);
	write_coord(random_num(-5, 5) + origin[0]);
	write_coord(random_num(-5, 5) + origin[1]);
	write_coord(random_num(-10, 10) + origin[2]);
	write_short(g_iFlameSpr);
	write_byte(random_num(5, 10));
	write_byte(200);
	message_end();
	g_BurningDuration[taskid + -6000]--;
	return 0;
}

create_blast2(Float:origin[3])
{
	engfunc(70, 4, 23, origin, 0);
	write_byte(21);
	engfunc(71, origin);
	engfunc(71, origin[1]);
	engfunc(71, origin[2]);
	engfunc(71, origin);
	engfunc(71, origin[1]);
	engfunc(71, floatadd(1136689152, origin[2]));
	write_short(g_iExplSpr);
	write_byte(0);
	write_byte(0);
	write_byte("DeathMsg");
	write_byte(60);
	write_byte(0);
	write_byte(200);
	write_byte(__dhud_holdtime);
	write_byte(0);
	write_byte(200);
	write_byte(0);
	message_end();
	engfunc(70, 4, 23, origin, 0);
	write_byte(21);
	engfunc(71, origin);
	engfunc(71, origin[1]);
	engfunc(71, origin[2]);
	engfunc(71, origin);
	engfunc(71, origin[1]);
	engfunc(71, floatadd(1139474432, origin[2]));
	write_short(g_iExplSpr);
	write_byte(0);
	write_byte(0);
	write_byte("DeathMsg");
	write_byte(60);
	write_byte(0);
	write_byte(200);
	write_byte(50);
	write_byte(0);
	write_byte(200);
	write_byte(0);
	message_end();
	engfunc(70, 4, 23, origin, 0);
	write_byte(21);
	engfunc(71, origin);
	engfunc(71, origin[1]);
	engfunc(71, origin[2]);
	engfunc(71, origin);
	engfunc(71, origin[1]);
	engfunc(71, floatadd(1141555200, origin[2]));
	write_short(g_iExplSpr);
	write_byte(0);
	write_byte(0);
	write_byte("DeathMsg");
	write_byte(60);
	write_byte(0);
	write_byte(200);
	write_byte(0);
	write_byte(0);
	write_byte(200);
	write_byte(0);
	message_end();
	return 0;
}

CountTeams()
{
	g_iTeamCount[1] = 0;
	g_iTeamCount[2] = 0;
	new i = 1;
	while (i <= g_iMaxPlayers)
	{
		if (is_user_connected(i))
		{
			g_iTeamCount[cs_get_user_team(i, 0)]++;
		}
		i++;
	}
	return 0;
}

TeleportPlayer(iPlayer)
{
	new Float:vOrigin[3] = 0.0;
	new Float:vViewOfs[3] = 0.0;
	pev(iPlayer, 118, vOrigin);
	pev(iPlayer, 135, vViewOfs);
	xs_vec_add(vOrigin, vViewOfs, vOrigin);
	new Float:vViewAngle[3] = 0.0;
	pev(iPlayer, 126, vViewAngle);
	new Float:vAimVector[3] = 0.0;
	angle_vector(vViewAngle, 1, vAimVector);
	xs_vec_normalize(vAimVector, vAimVector);
	xs_vec_mul_scalar(vAimVector, 9999.0, vAimVector);
	engfunc(29, vOrigin, vAimVector, 0, iPlayer, 0);
	get_tr2(0, 5, vAimVector);
	get_tr2(0, 7, vOrigin);
	xs_vec_normalize(vOrigin, vOrigin);
	xs_vec_mul_scalar(vOrigin, 36.0, vOrigin);
	xs_vec_add(vAimVector, vOrigin, vOrigin);
	new bool:bDucking;
	if (trace_hull(vOrigin, 1, iPlayer, 0))
	{
		if (!trace_hull(vOrigin, "", iPlayer, 0))
		{
			bDucking = true;
		}
		new iResetCount;
		Label_16C70:
		iResetCount++;
		while (iResetCount > 4)
		{
			new i;
			while (i < 6)
			{
				switch (i)
				{
					case 0:
					{
						xs_vec_copy(vOrigin, vViewOfs);
						vViewOfs[0] = floatadd(1098907648, vViewOfs[0]);
						engfunc(29, vOrigin, vViewOfs, 0, iPlayer, 0);
						get_tr2(0, "DeathMsg", vViewOfs);
						if (1.0 != vViewOfs[0])
						{
							get_tr2(0, 5, vViewOfs);
							vOrigin[0] = floatsub(vViewOfs[0], 1117782016);
							goto Label_16C70;
						}
					}
					case 1:
					{
						xs_vec_copy(vOrigin, vViewOfs);
						vViewOfs[0] = floatsub(vViewOfs[0], 1098907648);
						engfunc(29, vOrigin, vViewOfs, 0, iPlayer, 0);
						get_tr2(0, "DeathMsg", vViewOfs);
						if (1.0 != vViewOfs[0])
						{
							get_tr2(0, 5, vViewOfs);
							vOrigin[0] = floatadd(1117782016, vViewOfs[0]);
							goto Label_16C70;
						}
					}
					case 2:
					{
						xs_vec_copy(vOrigin, vViewOfs);
						new var6 = vViewOfs[1];
						var6 = floatadd(1098907648, var6);
						engfunc(29, vOrigin, vViewOfs, 0, iPlayer, 0);
						get_tr2(0, "DeathMsg", vViewOfs);
						if (1.0 != vViewOfs[0])
						{
							get_tr2(0, 5, vViewOfs);
							vOrigin[1] = floatsub(vViewOfs[1], 1117782016);
							goto Label_16C70;
						}
					}
					case 3:
					{
						xs_vec_copy(vOrigin, vViewOfs);
						new var5 = vViewOfs[1];
						var5 = floatsub(var5, 1098907648);
						engfunc(29, vOrigin, vViewOfs, 0, iPlayer, 0);
						get_tr2(0, "DeathMsg", vViewOfs);
						if (1.0 != vViewOfs[0])
						{
							get_tr2(0, 5, vViewOfs);
							vOrigin[1] = floatadd(1117782016, vViewOfs[1]);
							goto Label_16C70;
						}
					}
					case 4:
					{
						xs_vec_copy(vOrigin, vViewOfs);
						new var3 = vViewOfs[2];
						var3 = floatadd(1108344832, var3);
						engfunc(29, vOrigin, vViewOfs, 0, iPlayer, 0);
						get_tr2(0, "DeathMsg", vViewOfs);
						if (1.0 != vViewOfs[0])
						{
							xs_vec_copy(vOrigin, vViewOfs);
							new var4 = vViewOfs[2];
							var4 = floatadd(1099956224, var4);
							engfunc(29, vOrigin, vViewOfs, 0, iPlayer, 0);
							get_tr2(0, "DeathMsg", vViewOfs);
							if (1.0 != vViewOfs[0])
							{
								get_tr2(0, 5, vViewOfs);
								vOrigin[2] = floatsub(vViewOfs[2], 1117782016);
								goto Label_16C70;
							}
							bDucking = true;
						}
					}
					case 5:
					{
						xs_vec_copy(vOrigin, vViewOfs);
						new var1 = vViewOfs[2];
						var1 = floatsub(var1, 1108344832);
						engfunc(29, vOrigin, vViewOfs, 0, iPlayer, 0);
						get_tr2(0, "DeathMsg", vViewOfs);
						if (1.0 != vViewOfs[0])
						{
							xs_vec_copy(vOrigin, vViewOfs);
							new var2 = vViewOfs[2];
							var2 = floatsub(var2, 1099956224);
							engfunc(29, vOrigin, vViewOfs, 0, iPlayer, 0);
							get_tr2(0, "DeathMsg", vViewOfs);
							if (1.0 != vViewOfs[0])
							{
								get_tr2(0, 5, vViewOfs);
								vOrigin[2] = floatadd(1117782016, vViewOfs[2]);
								goto Label_16C70;
							}
							bDucking = true;
						}
					}
					default:
					{
					}
				}
				i++;
			}
		}
		ColorChat(iPlayer, Color:4, "%s You cannot\x04 Teleport there!\x01 You will be\x03 stuck!", "\x04[\x03NC ExD\x04]\x01");
		return 0;
	}
	if (bDucking)
	{
		set_pev(iPlayer, __dhud_x, pev(iPlayer, __dhud_x) | 16384);
		engfunc(5, iPlayer, 46488, 46500);
	}
	engfunc(26, iPlayer, vOrigin);
	emit_sound(iPlayer, 2, g_szNcSoundFiles[1], 1065353216, 1061997773, 0, __dhud_holdtime);
	return 1;
}

player_hudmessage(id, hudid, Float:time, color[3], msg[])
{
	static Float:y;
	static Float:x;
	static text[512];
	x = g_HudSync[hudid][1];
	y = g_HudSync[hudid][2];
	if (time > 0.0)
	{
		set_hudmessage(color[0], color[1], color[2], x, y, 0, 0, time, 0, 0, "DeathMsg");
	}
	else
	{
		set_hudmessage(color[0], color[1], color[2], x, y, 0, 0, g_HudSync[hudid][3], 0, 0, "DeathMsg");
	}
	vformat(text, 511, msg, 6);
	ShowSyncHudMsg(id, g_HudSync[hudid][0], text);
	return 0;
}

fm_set_rendering(entity, fx, r, g, b, render, amount)
{
	static Float:color[3];
	color[0] = float(r);
	color[1] = float(g);
	color[2] = float(b);
	set_pev(entity, 78, fx);
	set_pev(entity, 134, color);
	set_pev(entity, 77, render);
	set_pev(entity, "HamFilter", float(amount));
	return 0;
}

fm_set_rendering_float(entity, fx, Float:color[3], render, Float:amount)
{
	set_pev(entity, 78, fx);
	set_pev(entity, 134, color);
	set_pev(entity, 77, render);
	set_pev(entity, "HamFilter", amount);
	return 0;
}

fm_radius_damage(id, Float:flOrigin[3], Float:flDamage, Float:flRadius)
{
	new szClassname[33];
	new CsTeams:iTeam = cs_get_user_team(id, 0);
	static iEnt;
	iEnt = -1;
	while ((iEnt = engfunc(14, iEnt, flOrigin, flRadius)))
	{
		pev(iEnt, 1, szClassname, 32);
		new var1;
		if (!(!equali(szClassname, "player", 0) || !is_user_alive(iEnt) || iTeam != cs_get_user_team(iEnt, 0)))
		{
			ExecuteHamB(9, iEnt, 0, id, flDamage, 0);
		}
	}
	return 0;
}

DrawLaser(Float:v_Origin[3], Float:v_EndOrigin[3], rc, gc, bc)
{
	message_begin(0, 23, 2180, 0);
	write_byte(0);
	engfunc(71, v_Origin);
	engfunc(71, v_Origin[1]);
	engfunc(71, v_Origin[2]);
	engfunc(71, v_EndOrigin);
	engfunc(71, v_EndOrigin[1]);
	engfunc(71, v_EndOrigin[2]);
	write_short(g_iTrailSpr);
	write_byte(0);
	write_byte(0);
	write_byte(1);
	write_byte(5);
	write_byte(0);
	write_byte(rc);
	write_byte(gc);
	write_byte(bc);
	write_byte(255);
	write_byte(255);
	message_end();
	return 0;
}

CreateExplosion(iCurrent)
{
	new Float:vOrigin[3] = 0.0;
	pev(iCurrent, 118, vOrigin);
	message_begin(0, 23, 2180, 0);
	write_byte(99);
	write_short(iCurrent);
	message_end();
	engfunc(70, 4, 23, vOrigin, 0);
	write_byte("");
	engfunc(71, vOrigin);
	engfunc(71, vOrigin[1]);
	engfunc(71, vOrigin[2]);
	write_short(g_iExpSprite);
	write_byte(30);
	write_byte(15);
	write_byte(0);
	message_end();
	return 0;
}

PlaySound(i_Ent, i_SoundType)
{
	switch (i_SoundType)
	{
		case 0:
		{
			new var1 = g_szLaserSounds;
			emit_sound(i_Ent, 2, var1[0][var1], 1065353216, 1061997773, 0, __dhud_holdtime);
			emit_sound(i_Ent, "DeathMsg", g_szLaserSounds[1], 1045220557, 1061997773, 0, __dhud_holdtime);
		}
		case 1:
		{
			emit_sound(i_Ent, 2, g_szLaserSounds[2], 1056964608, 1061997773, 1, 75);
		}
		case 2:
		{
			emit_sound(i_Ent, "DeathMsg", g_szLaserSounds[1], 1045220557, 1061997773, 32, __dhud_holdtime);
			emit_sound(i_Ent, 2, g_szLaserSounds[2], 1056964608, 1061997773, 32, 75);
		}
		default:
		{
		}
	}
	return 0;
}

public RemoveAllTripmines(i_Owner)
{
	new iEnt = g_iMaxPlayers + 1;
	new clsname[32];
	while ((iEnt = engfunc(12, iEnt, "classname", ENT_CLASS_NAME)))
	{
		if (i_Owner)
		{
			if (!(i_Owner != pev(iEnt, 101)))
			{
				clsname[0] = 0;
				pev(iEnt, 1, clsname, 31);
				if (equali(clsname, ENT_CLASS_NAME, 0))
				{
					PlaySound(iEnt, 2);
					engfunc(20, iEnt);
				}
			}
		}
		else
		{
			set_pev(iEnt, __dhud_x, 1073741824);
		}
	}
	return 0;
}

player_strip_weapons(id)
{
	strip_user_weapons(id);
	set_pdata_int(id, 116, 0, 5);
	give_item(id, "weapon_knife");
	return 0;
}

ctcount_allowed()
{
	static count;
	count = g_iTeamCount[2] + g_iTeamCount[1] / get_pcvar_num(g_pNightcrawlerRatio);
	if (count <= 1)
	{
		count = 1;
	}
	else
	{
		if (count <= 2)
		{
			count = 2;
		}
		if (count <= 3)
		{
			count = 3;
		}
		if (count <= 4)
		{
			count = 4;
		}
		if (count <= 5)
		{
			count = 5;
		}
		if (count <= 6)
		{
			count = 6;
		}
		if (count <= 7)
		{
			count = 7;
		}
		if (count <= 8)
		{
			count = 8;
		}
		if (count <= 9)
		{
			count = 9;
		}
		if (count <= 10)
		{
			count = 10;
		}
		count = 11;
	}
	return count;
}

public round_restart()
{
	remove_task("weapon_xm1014", 0);
	return 0;
}

public Round_Timer()
{
	if (g_round_started)
	{
		g_round_started = false;
		g_roundtime = get_msg_arg_int(1);
		g_show_adv = g_roundtime + -11;
		set_task(float(g_show_adv), "show_adv_end", "weapon_xm1014", 25496, 0, 25500, 0);
		set_task(float(g_roundtime), "force_end_T", "weapon_xm1014", 25496, 0, 25500, 0);
		return 0;
	}
	return 0;
}

public show_adv_end()
{
	player_dhudmessage(0, -1.0, -1.0, 4.0, 48808, "10..\n Secs Left Hurry !!!");
	return 0;
}

public force_end_T()
{
	BroadcastAudio(0, "%!MRAD_CTWIN", 100, true);
	EndRoundMessage("#CTs_Win", 8, true);
	RoundTerminating(1, 3.5);
	LogEvent_RoundEnd();
	return 0;
}

RoundTerminating(winStatus, Float:delay)
{
	OrpheuMemorySetAtAddress(g_pGameRules, "m_iNumCTWins", 1, OrpheuMemoryGetAtAddress(g_pGameRules, "m_iNumCTWins") + 1);
	OrpheuMemorySetAtAddress(g_pGameRules, "m_iRoundWinStatus", 1, winStatus);
	OrpheuMemorySetAtAddress(g_pGameRules, "m_fTeamCount", 1, floatadd(get_gametime(), delay));
	OrpheuMemorySetAtAddress(g_pGameRules, "m_bRoundTerminating", 1, 1);
	return 0;
}

BroadcastAudio(senderID, audioCode[], pitch, bool:notifyAllPlugins)
{
	static messageSendAudio;
	new var1;
	if (messageSendAudio || (messageSendAudio = get_user_msgid("SendAudio")))
	{
		if (notifyAllPlugins)
		{
			emessage_begin(0, messageSendAudio, 49364, 0);
			ewrite_byte(senderID);
			ewrite_string(audioCode);
			ewrite_short(pitch);
			emessage_end();
		}
		message_begin(0, messageSendAudio, 2180, 0);
		write_byte(senderID);
		write_string(audioCode);
		write_short(pitch);
		message_end();
	}
	return 0;
}

EndRoundMessage(message[], event, bool:notifyAllPlugins)
{
	static OrpheuFunction:handleFuncEndRoundMessage;
	if (!handleFuncEndRoundMessage)
	{
		handleFuncEndRoundMessage = OrpheuGetFunction("EndRoundMessage", 19360);
	}
	if (notifyAllPlugins)
	{
		OrpheuCallSuper(handleFuncEndRoundMessage, message, event);
	}
	else
	{
		OrpheuCall(handleFuncEndRoundMessage, message, event);
	}
	return 0;
}


/* ERROR! null */
 function "audioCode" (number 124)

/* ERROR! null */
 function "pitch" (number 125)

/* ERROR! null */
 function "notifyAllPlugins" (number 126)

/* ERROR! null */
 function "delay" (number 127)
 